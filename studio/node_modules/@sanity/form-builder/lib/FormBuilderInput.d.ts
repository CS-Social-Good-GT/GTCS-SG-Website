import React from 'react';
import { Path, PathSegment } from './typedefs/path';
import PatchEvent from './PatchEvent';
import { Type, Marker } from './typedefs';
declare type Props = {
    value: any;
    type: Type;
    onChange: (arg0: PatchEvent) => void;
    onFocus: (arg0: Path) => void;
    onBlur: () => void;
    readOnly: boolean;
    focusPath: Path;
    markers: Marker[];
    level: number;
    isRoot?: boolean;
    path: Array<PathSegment>;
    filterField?: Function;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
    onKeyPress?: (ev: React.KeyboardEvent) => void;
};
export declare class FormBuilderInput extends React.Component<Props> {
    scrollTimeout: number;
    _element: HTMLDivElement | null;
    static contextTypes: {
        formBuilder: () => void;
        getValuePath: () => void;
    };
    static childContextTypes: {
        getValuePath: () => void;
    };
    static defaultProps: {
        focusPath: any[];
        path: any[];
        markers: Marker[];
    };
    _input: FormBuilderInput | HTMLDivElement | null;
    getValuePath: () => any;
    getChildContext(): {
        getValuePath: () => any;
    };
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any): boolean;
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    componentWillUnmount(): void;
    resolveInputComponent(type: Type): any;
    setInput: (component: FormBuilderInput | HTMLDivElement) => void;
    focus(): void;
    handleChange: (patchEvent: any) => void;
    handleFocus: (nextPath: any) => void;
    handleBlur: () => void;
    getChildFocusPath(): (string | number | {
        _key: string;
    })[];
    render(): JSX.Element;
}
export {};
