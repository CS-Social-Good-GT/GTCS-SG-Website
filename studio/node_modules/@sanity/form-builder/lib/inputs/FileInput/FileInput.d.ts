import React from 'react';
import PropTypes from 'prop-types';
import PatchEvent from '../../PatchEvent';
import { Marker, Reference, Type } from '../../typedefs';
import { ResolvedUploader, Uploader, UploaderResolver } from '../../sanity/uploads/typedefs';
import { Path } from '../../typedefs/path';
import { Observable } from 'rxjs';
declare type FieldT = {
    name: string;
    type: Type;
};
declare type Value = {
    _upload?: any;
    asset?: Reference;
    hotspot?: Record<string, any>;
    crop?: Record<string, any>;
};
export declare type Props = {
    value?: Value;
    type: Type;
    level: number;
    onChange: (arg0: PatchEvent) => void;
    resolveUploader: UploaderResolver;
    materialize: (arg0: string) => Observable<any>;
    onBlur: () => void;
    onFocus: (path: Path) => void;
    readOnly: boolean | null;
    focusPath: Array<any>;
    markers: Array<Marker>;
};
declare type FileInputState = {
    isUploading: boolean;
    uploadError: Error | null;
    isAdvancedEditOpen: boolean;
    hasFocus: boolean;
};
export default class FileInput extends React.PureComponent<Props, FileInputState> {
    static contextTypes: {
        getValuePath: PropTypes.Requireable<(...args: any[]) => any>;
    };
    _focusArea: any;
    uploadSubscription: any;
    state: {
        isUploading: boolean;
        isAdvancedEditOpen: boolean;
        uploadError: any;
        hasFocus: boolean;
    };
    handleRemoveButtonClick: (event: React.SyntheticEvent<any, Event>) => void;
    clearUploadStatus(): void;
    cancelUpload(): void;
    handleCancelUpload: () => void;
    handleSelectFile: (files: FileList) => void;
    uploadFirstAccepted(fileList: FileList): void;
    uploadWith(uploader: Uploader, file: File): void;
    renderMaterializedAsset: (assetDocument: Record<string, any>) => JSX.Element;
    renderUploadState(uploadState: any): JSX.Element;
    handleFieldChange: (event: PatchEvent, field: FieldT) => void;
    handleStartAdvancedEdit: () => void;
    handleStopAdvancedEdit: () => void;
    renderAdvancedEdit(fields: Array<FieldT>): JSX.Element;
    renderFields(fields: Array<FieldT>): JSX.Element[];
    handleFocus: (event: any) => void;
    handleBlur: (event: any) => void;
    renderField(field: FieldT): JSX.Element;
    renderAsset(): JSX.Element;
    focus(): void;
    setFocusArea: (el: any) => void;
    getUploadOptions: (file: File) => ResolvedUploader[];
    handleUpload: ({ file, uploader }: {
        file: any;
        uploader: any;
    }) => void;
    render(): JSX.Element;
}
export {};
