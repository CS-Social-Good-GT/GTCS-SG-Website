import React from 'react';
import { ResolvedUploader, Uploader } from '../../sanity/uploads/typedefs';
import { Marker, Type } from '../../typedefs';
import { Path } from '../../typedefs/path';
import { Subscription } from '../../typedefs/observable';
import { PatchEvent } from '../../PatchEvent';
import { ArrayType, ItemValue } from './typedefs';
export declare type Props = {
    type: ArrayType;
    value: Array<ItemValue>;
    markers: Array<Marker>;
    level: number;
    onChange: (event: PatchEvent) => void;
    onFocus: (path: Path) => void;
    onBlur: () => void;
    focusPath: Path;
    readOnly: boolean;
    filterField: (field: any) => boolean;
    resolveUploader?: (type: Type, file: File) => Uploader;
};
declare type ArrayInputState = {
    isMoving: boolean;
};
export default class ArrayInput extends React.Component<Props, ArrayInputState> {
    _element: any;
    uploadSubscriptions: {
        [name: string]: Subscription;
    };
    static defaultProps: {
        focusPath: any[];
    };
    state: {
        isMoving: boolean;
    };
    insert: (itemValue: ItemValue, position: import("../../typedefs/patch").InsertPosition, atIndex: number) => void;
    handlePrepend: (value: ItemValue) => void;
    handleAppend: (value: ItemValue) => void;
    handleRemoveItem: (item: ItemValue) => void;
    handleFocus: () => void;
    handleFocusItem: (item: ItemValue) => void;
    removeItem(item: ItemValue): void;
    handleItemChange: (event: PatchEvent, item: ItemValue) => void;
    handleSortStart: () => void;
    handleSortEnd: (event: {
        newIndex: number;
        oldIndex: number;
    }) => void;
    getMemberTypeOfItem(item: ItemValue): Type;
    renderList: () => JSX.Element;
    focus(): void;
    setElement: (el: any) => void;
    getUploadOptions: (file: File) => ResolvedUploader[];
    handleFixMissingKeys: () => void;
    handleRemoveNonObjectValues: () => void;
    handleUpload: ({ file, type, uploader }: {
        file: any;
        type: any;
        uploader: any;
    }) => void;
    render(): JSX.Element;
}
export {};
