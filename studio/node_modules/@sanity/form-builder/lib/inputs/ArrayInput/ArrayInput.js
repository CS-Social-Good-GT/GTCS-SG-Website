"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _react = _interopRequireDefault(require("react"));

var _functions = _interopRequireDefault(require("part:@sanity/form-builder/input/array/functions"));

var _operators = require("rxjs/operators");

var _resolveTypeName = require("../../utils/resolveTypeName");

var _paths = require("@sanity/util/paths");

var _UploadTargetFieldset = _interopRequireDefault(require("../../utils/UploadTargetFieldset"));

var _PatchEvent = require("../../PatchEvent");

var _ArrayInput = _interopRequireDefault(require("./styles/ArrayInput.css"));

var _resolveListComponents = _interopRequireDefault(require("./resolveListComponents"));

var _ItemValue = _interopRequireDefault(require("./ItemValue"));

var _randomKey = _interopRequireDefault(require("./randomKey"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _Details = _interopRequireDefault(require("../common/Details"));

var _formBuilder = _interopRequireDefault(require("config:@sanity/form-builder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NO_MARKERS = [];
var SUPPORT_DIRECT_UPLOADS = (0, _get2.default)(_formBuilder.default, 'images.directUploads');

function createProtoValue(type) {
  if (type.jsonType !== 'object') {
    throw new Error("Invalid item type: \"".concat(type.type, "\". Default array input can only contain objects (for now)"));
  }

  var key = (0, _randomKey.default)(12);
  return type.name === 'object' ? {
    _key: key
  } : {
    _type: type.name,
    _key: key
  };
}

class ArrayInput extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_element", void 0);

    _defineProperty(this, "uploadSubscriptions", {});

    _defineProperty(this, "state", {
      isMoving: false
    });

    _defineProperty(this, "insert", (itemValue, position, atIndex) => {
      var onChange = this.props.onChange;
      onChange(_PatchEvent.PatchEvent.from((0, _PatchEvent.setIfMissing)([]), (0, _PatchEvent.insert)([itemValue], position, [atIndex])));
    });

    _defineProperty(this, "handlePrepend", value => {
      this.insert(value, 'before', 0);
      this.handleFocusItem(value);
    });

    _defineProperty(this, "handleAppend", value => {
      this.insert(value, 'after', -1);
      this.handleFocusItem(value);
    });

    _defineProperty(this, "handleRemoveItem", item => {
      this.removeItem(item);
    });

    _defineProperty(this, "handleFocus", () => {
      this.props.onFocus([_paths.FOCUS_TERMINATOR]);
    });

    _defineProperty(this, "handleFocusItem", item => {
      this.props.onFocus([{
        _key: item._key
      }, _paths.FOCUS_TERMINATOR]);
    });

    _defineProperty(this, "handleItemChange", (event, item) => {
      var _this$props = this.props,
          onChange = _this$props.onChange,
          value = _this$props.value;
      var memberType = this.getMemberTypeOfItem(item);

      if (!memberType) {
        // eslint-disable-next-line no-console
        console.log('Could not find member type of item ', item);
        return;
      }

      if (memberType.readOnly) {
        return;
      }

      var key = item._key || (0, _randomKey.default)(12);
      onChange(event.prefixAll({
        _key: key
      }).prepend(item._key ? [] : (0, _PatchEvent.set)(key, [value.indexOf(item), '_key'])));
    });

    _defineProperty(this, "handleSortStart", () => {
      this.setState({
        isMoving: true
      });
    });

    _defineProperty(this, "handleSortEnd", event => {
      this.setState({
        isMoving: false
      });
      var _this$props2 = this.props,
          value = _this$props2.value,
          onChange = _this$props2.onChange;
      var item = value[event.oldIndex];
      var refItem = value[event.newIndex]; // console.log('from %d => %d', event.oldIndex, event.newIndex, event)

      if (!item._key || !refItem._key) {
        // eslint-disable-next-line no-console
        console.error('Neither the item you are moving nor the item you are moving to have a key. Cannot continue.');
        return;
      }

      if (event.oldIndex === event.newIndex || item._key === refItem._key) {
        return;
      }

      onChange(_PatchEvent.PatchEvent.from((0, _PatchEvent.unset)([{
        _key: item._key
      }]), (0, _PatchEvent.insert)([item], event.oldIndex > event.newIndex ? 'before' : 'after', [{
        _key: refItem._key
      }])));
    });

    _defineProperty(this, "renderList", () => {
      var _this$props3 = this.props,
          type = _this$props3.type,
          markers = _this$props3.markers,
          readOnly = _this$props3.readOnly,
          value = _this$props3.value,
          focusPath = _this$props3.focusPath,
          onBlur = _this$props3.onBlur,
          onFocus = _this$props3.onFocus,
          level = _this$props3.level,
          filterField = _this$props3.filterField;
      var isMoving = this.state.isMoving;
      var options = type.options || {};
      var hasMissingKeys = value.some(item => !item._key);
      var isSortable = options.sortable !== false && !hasMissingKeys;
      var isGrid = options.layout === 'grid';

      var _resolveListComponent = (0, _resolveListComponents.default)(isSortable, isGrid),
          List = _resolveListComponent.List,
          Item = _resolveListComponent.Item;

      var listProps = isSortable ? {
        movingItemClass: _ArrayInput.default.movingItem,
        onSortEnd: this.handleSortEnd,
        onSortStart: this.handleSortStart,
        lockToContainerEdges: true,
        useDragHandle: !isGrid
      } : {};
      var listItemClassName = isMoving ? _ArrayInput.default.listItemMute : _ArrayInput.default.listItem;
      return /*#__PURE__*/_react.default.createElement(List, _extends({
        className: readOnly ? _ArrayInput.default.listReadOnly : _ArrayInput.default.list
      }, listProps), value.map((item, index) => {
        var isChildMarker = marker => (0, _paths.startsWith)([index], marker.path) || (0, _paths.startsWith)([{
          _key: item && item._key
        }], marker.path);

        var childMarkers = markers.filter(isChildMarker);
        var itemProps = isSortable ? {
          index
        } : {};
        return /*#__PURE__*/_react.default.createElement(Item, _extends({
          key: item._key,
          className: isGrid ? _ArrayInput.default.gridItem : listItemClassName
        }, itemProps), /*#__PURE__*/_react.default.createElement(_ItemValue.default, {
          type: type,
          value: item,
          level: level,
          markers: childMarkers.length === 0 ? NO_MARKERS : childMarkers,
          onRemove: this.handleRemoveItem,
          onChange: this.handleItemChange,
          focusPath: focusPath,
          filterField: filterField,
          onFocus: onFocus,
          onBlur: onBlur,
          readOnly: readOnly || hasMissingKeys
        }));
      }));
    });

    _defineProperty(this, "setElement", el => {
      this._element = el;
    });

    _defineProperty(this, "getUploadOptions", file => {
      var _this$props4 = this.props,
          type = _this$props4.type,
          resolveUploader = _this$props4.resolveUploader;

      if (!resolveUploader) {
        return [];
      }

      return type.of.map(memberType => {
        var uploader = resolveUploader(memberType, file);
        return uploader && {
          type: memberType,
          uploader
        };
      }).filter(Boolean);
    });

    _defineProperty(this, "handleFixMissingKeys", () => {
      var _this$props5 = this.props,
          onChange = _this$props5.onChange,
          value = _this$props5.value;
      var patches = value.map((val, i) => (0, _PatchEvent.setIfMissing)((0, _randomKey.default)(), [i, '_key']));
      onChange(_PatchEvent.PatchEvent.from(...patches));
    });

    _defineProperty(this, "handleRemoveNonObjectValues", () => {
      var _this$props6 = this.props,
          onChange = _this$props6.onChange,
          value = _this$props6.value;
      var nonObjects = value.reduce((acc, val, i) => (0, _isPlainObject2.default)(val) ? acc : acc.concat(i), []).reverse();
      var patches = nonObjects.map(index => (0, _PatchEvent.unset)([index]));
      onChange(_PatchEvent.PatchEvent.from(...patches));
    });

    _defineProperty(this, "handleUpload", (_ref) => {
      var file = _ref.file,
          type = _ref.type,
          uploader = _ref.uploader;
      var onChange = this.props.onChange;
      var item = createProtoValue(type);
      var key = item._key;
      this.insert(item, 'after', -1);
      var events$ = uploader.upload(file, type).pipe((0, _operators.map)(uploadEvent => _PatchEvent.PatchEvent.from(uploadEvent.patches).prefixAll({
        _key: key
      })));
      this.uploadSubscriptions = _objectSpread(_objectSpread({}, this.uploadSubscriptions), {}, {
        [key]: events$.subscribe(onChange)
      });
    });
  }

  removeItem(item) {
    var _this$props7 = this.props,
        onChange = _this$props7.onChange,
        onFocus = _this$props7.onFocus,
        value = _this$props7.value;
    onChange(_PatchEvent.PatchEvent.from((0, _PatchEvent.unset)(item._key ? [{
      _key: item._key
    }] : [value.indexOf(item)])));

    if (item._key in this.uploadSubscriptions) {
      this.uploadSubscriptions[item._key].unsubscribe();
    }

    var idx = value.indexOf(item);
    var nextItem = value[idx + 1] || value[idx - 1];
    onFocus([nextItem ? {
      _key: nextItem._key
    } : _paths.FOCUS_TERMINATOR]);
  }

  getMemberTypeOfItem(item) {
    var type = this.props.type;
    var itemTypeName = (0, _resolveTypeName.resolveTypeName)(item);
    return type.of.find(memberType => memberType.name === itemTypeName);
  }

  focus() {
    if (this._element) {
      this._element.focus();
    }
  }

  render() {
    var _this$props8 = this.props,
        type = _this$props8.type,
        level = _this$props8.level,
        markers = _this$props8.markers,
        readOnly = _this$props8.readOnly,
        onChange = _this$props8.onChange,
        value = _this$props8.value;
    var hasNonObjectValues = (value || []).some(item => !(0, _isPlainObject2.default)(item));

    if (hasNonObjectValues) {
      return /*#__PURE__*/_react.default.createElement(_default2.default, {
        legend: type.title,
        description: type.description,
        level: level,
        tabIndex: 0,
        onFocus: this.handleFocus,
        ref: this.setElement,
        markers: markers
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _ArrayInput.default.nonObjectsWarning
      }, "Some items in this list are not objects. We need to remove them before the list can be edited.", /*#__PURE__*/_react.default.createElement("div", {
        className: _ArrayInput.default.removeNonObjectsButtonWrapper
      }, /*#__PURE__*/_react.default.createElement(_default.default, {
        onClick: this.handleRemoveNonObjectValues
      }, "Remove non-object values")), /*#__PURE__*/_react.default.createElement(_Details.default, {
        title: /*#__PURE__*/_react.default.createElement("b", null, "Why is this happening?")
      }, "This usually happens when items are created through an API client from outside the Content Studio and sets invalid data, or a custom input component have inserted incorrect values into the list.")));
    }

    var hasMissingKeys = (value || []).some(item => !item._key);

    if (hasMissingKeys) {
      return /*#__PURE__*/_react.default.createElement(_default2.default, {
        legend: type.title,
        description: type.description,
        level: level,
        tabIndex: 0,
        onFocus: this.handleFocus,
        ref: this.setElement,
        markers: markers
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _ArrayInput.default.missingKeysWarning
      }, "Some items in this list are missing their keys. We need to fix this before the list can be edited.", /*#__PURE__*/_react.default.createElement("div", {
        className: _ArrayInput.default.fixMissingKeysButtonWrapper
      }, /*#__PURE__*/_react.default.createElement(_default.default, {
        onClick: this.handleFixMissingKeys
      }, "Fix missing keys")), /*#__PURE__*/_react.default.createElement(_Details.default, {
        title: /*#__PURE__*/_react.default.createElement("b", null, "Why is this happening?")
      }, "This usually happens when items are created through the API client from outside the Content Studio and someone forgets to set the ", /*#__PURE__*/_react.default.createElement("code", null, "_key"), "-property of list items.", /*#__PURE__*/_react.default.createElement("p", null, "The value of the ", /*#__PURE__*/_react.default.createElement("code", null, "_key"), " can be any ", /*#__PURE__*/_react.default.createElement("b", null, "string"), " as long as it is", ' ', /*#__PURE__*/_react.default.createElement("b", null, "unique"), " for each element within the array."))), this.renderList());
    }

    var FieldSetComponent = SUPPORT_DIRECT_UPLOADS ? _UploadTargetFieldset.default : _default2.default;
    var uploadProps = SUPPORT_DIRECT_UPLOADS ? {
      getUploadOptions: this.getUploadOptions,
      onUpload: this.handleUpload
    } : {};
    return /*#__PURE__*/_react.default.createElement(FieldSetComponent, _extends({
      markers: markers,
      tabIndex: 0,
      legend: type.title,
      description: type.description,
      level: level,
      className: _ArrayInput.default.root,
      onFocus: this.handleFocus,
      type: type,
      ref: this.setElement
    }, uploadProps), value && value.length > 0 && this.renderList(), /*#__PURE__*/_react.default.createElement(_functions.default, {
      type: type,
      value: value,
      readOnly: readOnly,
      onAppendItem: this.handleAppend,
      onPrependItem: this.handlePrepend,
      onFocusItem: this.handleFocusItem,
      onCreateValue: createProtoValue,
      onChange: onChange
    }));
  }

}

exports.default = ArrayInput;

_defineProperty(ArrayInput, "defaultProps", {
  focusPath: []
});