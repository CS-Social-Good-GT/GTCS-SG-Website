"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _linkIcon = _interopRequireDefault(require("part:@sanity/base/link-icon"));

var _fold = _interopRequireDefault(require("part:@sanity/components/edititem/fold"));

var _popover = _interopRequireDefault(require("part:@sanity/components/dialogs/popover"));

var _fullscreen = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen"));

var _default = _interopRequireDefault(require("part:@sanity/components/dialogs/default"));

var _content = _interopRequireDefault(require("part:@sanity/components/dialogs/content"));

var _status = _interopRequireDefault(require("part:@sanity/components/validation/status"));

var _sortable = require("part:@sanity/components/lists/sortable");

var _router = require("part:@sanity/base/router");

var _barsIcon = _interopRequireDefault(require("part:@sanity/base/bars-icon"));

var _FormBuilderInput = require("../../FormBuilderInput");

var _Preview = _interopRequireDefault(require("../../Preview"));

var _resolveTypeName = require("../../utils/resolveTypeName");

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _ConfirmButton = _interopRequireDefault(require("./ConfirmButton"));

var _ItemValue = _interopRequireDefault(require("./styles/ItemValue.css"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DragHandle = (0, _sortable.createDragHandle)(() => /*#__PURE__*/_react.default.createElement("span", {
  className: _ItemValue.default.dragHandle
}, /*#__PURE__*/_react.default.createElement(_barsIcon.default, null)));
var CLOSE_ACTION = {
  name: 'close',
  title: 'Close'
};
var CANCEL_ACTION = {
  name: 'close',
  title: 'Cancel'
};
var DELETE_ACTION = {
  name: 'delete',
  title: 'Delete',
  color: 'danger',
  inverted: true,
  secondary: true
};

function pathSegmentFrom(value) {
  return {
    _key: value._key
  };
}

function hasFocusInPath(path, value) {
  return path.length === 1 && PathUtils.isSegmentEqual(path[0], pathSegmentFrom(value));
}

var IGNORE_KEYS = ['_key', '_type', '_weak'];

function isEmpty(value) {
  return Object.keys(value).every(key => IGNORE_KEYS.includes(key));
}

class RenderItemValue extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_focusArea", void 0);

    _defineProperty(this, "handleEditStart", event => {
      this.setFocus([PathUtils.FOCUS_TERMINATOR]);
    });

    _defineProperty(this, "handleFocus", () => {
      this.setFocus();
    });

    _defineProperty(this, "handleEditStop", () => {
      if (isEmpty(this.props.value)) {
        this.handleRemove();
      } else {
        this.setFocus();
      }
    });

    _defineProperty(this, "handleKeyPress", event => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        this.setFocus([PathUtils.FOCUS_TERMINATOR]);
      }
    });

    _defineProperty(this, "handleRemove", () => {
      var _this$props = this.props,
          onRemove = _this$props.onRemove,
          value = _this$props.value;
      onRemove(value);
    });

    _defineProperty(this, "handleChange", event => {
      var _this$props2 = this.props,
          onChange = _this$props2.onChange,
          value = _this$props2.value;
      onChange(event, value);
    });

    _defineProperty(this, "setFocusArea", el => {
      this._focusArea = el;
    });

    _defineProperty(this, "handleDialogAction", action => {
      if (action.name === 'close') {
        this.handleEditStop();
      }

      if (action.name === 'delete') {
        // Needs a proper confirm dialog later
        // eslint-disable-next-line no-alert
        if (window.confirm('Do you really want to delete?')) {
          this.handleRemove();
        }
      }
    });
  }

  componentDidMount() {
    var _this$props3 = this.props,
        focusPath = _this$props3.focusPath,
        value = _this$props3.value;

    if (value._key && hasFocusInPath(focusPath, value)) {
      this.focus();
    }
  }

  componentDidUpdate(prevProps) {
    var hadFocus = hasFocusInPath(prevProps.focusPath, prevProps.value);
    var hasFocus = hasFocusInPath(this.props.focusPath, this.props.value);

    if (!hadFocus && hasFocus) {
      this.focus();
    }
  }

  getMemberType() {
    var _this$props4 = this.props,
        value = _this$props4.value,
        type = _this$props4.type;
    var itemTypeName = (0, _resolveTypeName.resolveTypeName)(value);
    var memberType = type.of.find(memberType => memberType.name === itemTypeName);
    return memberType;
  }

  getTitle() {
    var readOnly = this.props.readOnly;
    var memberType = this.getMemberType();

    if (readOnly || memberType.readOnly) {
      return memberType.title || '';
    }

    return memberType.title ? "Edit ".concat(memberType.title) : 'Edit';
  }

  setFocus() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var _this$props5 = this.props,
        value = _this$props5.value,
        onFocus = _this$props5.onFocus;
    onFocus([{
      _key: value._key
    }, ...path]);
  }

  focus() {
    if (this._focusArea) {
      this._focusArea.focus();
    }
  }

  renderEditItemForm(item) {
    var _this$props6 = this.props,
        type = _this$props6.type,
        markers = _this$props6.markers,
        focusPath = _this$props6.focusPath,
        onFocus = _this$props6.onFocus,
        onBlur = _this$props6.onBlur,
        readOnly = _this$props6.readOnly,
        filterField = _this$props6.filterField;
    var options = type.options || {};
    var memberType = this.getMemberType();
    var childMarkers = markers.filter(marker => marker.path.length > 1);

    var content = /*#__PURE__*/_react.default.createElement(_FormBuilderInput.FormBuilderInput, {
      type: memberType,
      level: 0,
      value: isEmpty(item) ? undefined : item,
      onChange: this.handleChange,
      onFocus: onFocus,
      onBlur: onBlur,
      focusPath: focusPath,
      readOnly: readOnly || memberType.readOnly,
      markers: childMarkers,
      path: [{
        _key: item._key
      }],
      filterField: filterField
    }); // test focus issues by uncommenting the next line
    // return content


    var title = this.getTitle();

    if (options.editModal === 'fullscreen') {
      return /*#__PURE__*/_react.default.createElement(_fullscreen.default, {
        title: title,
        onClose: this.handleEditStop,
        isOpen: true
      }, content);
    }

    if (options.editModal === 'fold') {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_fold.default, {
        title: title,
        onClose: this.handleEditStop
      }, content));
    }

    var isItemEmpty = isEmpty(item);
    var actions = [isItemEmpty ? CANCEL_ACTION : CLOSE_ACTION, !isItemEmpty && !readOnly && DELETE_ACTION].filter(Boolean);

    if (options.editModal === 'popover') {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: _ItemValue.default.popupAnchor
      }, /*#__PURE__*/_react.default.createElement(_popover.default, {
        title: title,
        onClose: this.handleEditStop,
        onEscape: this.handleEditStop,
        onClickOutside: this.handleEditStop,
        actions: actions,
        onAction: this.handleDialogAction,
        placement: "auto"
      }, /*#__PURE__*/_react.default.createElement(_content.default, {
        size: "small"
      }, content)));
    }

    return /*#__PURE__*/_react.default.createElement(_default.default, {
      onClose: this.handleEditStop,
      key: item._key,
      title: title,
      actions: actions,
      onAction: this.handleDialogAction,
      showCloseButton: false
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_content.default, {
      size: "medium"
    }, content)));
  }

  renderItem() {
    var _this$props7 = this.props,
        value = _this$props7.value,
        markers = _this$props7.markers,
        type = _this$props7.type,
        readOnly = _this$props7.readOnly;
    var options = type.options || {};
    var isGrid = options.layout === 'grid';
    var isSortable = !readOnly && !type.readOnly && options.sortable !== false;
    var previewLayout = isGrid ? 'media' : 'default';
    var validation = markers.filter(marker => marker.type === 'validation');
    var errors = validation.filter(marker => marker.level === 'error');
    var scopedValidation = validation.map(marker => {
      if (marker.path.length <= 1) {
        return marker;
      }

      var level = marker.level === 'error' ? 'errors' : 'warnings';
      return Object.assign({}, marker, {
        item: marker.item.cloneWithMessage("Contains ".concat(level))
      });
    });
    var classNames = [errors.length > 0 ? _ItemValue.default.innerWithError : _ItemValue.default.inner, !value._key && _ItemValue.default.warning].filter(Boolean).join(' ');
    return /*#__PURE__*/_react.default.createElement("div", {
      className: classNames
    }, !isGrid && isSortable && /*#__PURE__*/_react.default.createElement(DragHandle, null), /*#__PURE__*/_react.default.createElement("div", {
      tabIndex: 0,
      onClick: value._key && this.handleEditStart,
      onKeyPress: this.handleKeyPress,
      className: _ItemValue.default.previewWrapper
    }, /*#__PURE__*/_react.default.createElement("div", {
      tabIndex: -1,
      ref: this.setFocusArea,
      className: _ItemValue.default.previewWrapperHelper,
      onFocus: this.handleFocus
    }, !value._key && /*#__PURE__*/_react.default.createElement("div", {
      className: _ItemValue.default.missingKeyMessage
    }, "Missing key"), /*#__PURE__*/_react.default.createElement(_Preview.default, {
      layout: previewLayout,
      value: value,
      type: this.getMemberType()
    }))), /*#__PURE__*/_react.default.createElement("div", {
      className: isGrid ? _ItemValue.default.functionsInGrid : _ItemValue.default.functions
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_status.default, {
      markers: scopedValidation
    })), value._ref && /*#__PURE__*/_react.default.createElement(_router.IntentLink, {
      className: _ItemValue.default.linkToReference,
      intent: "edit",
      params: {
        id: value._ref
      }
    }, /*#__PURE__*/_react.default.createElement(_linkIcon.default, null)), !readOnly && /*#__PURE__*/_react.default.createElement(_ConfirmButton.default, {
      title: "Remove this item",
      onConfirm: this.handleRemove
    })));
  }

  render() {
    var _this$props8 = this.props,
        value = _this$props8.value,
        focusPath = _this$props8.focusPath,
        type = _this$props8.type;
    var options = type.options || {};
    var isGrid = options.layout === 'grid';
    var isExpanded = PathUtils.isExpanded(value, focusPath);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: isGrid ? _ItemValue.default.gridItem : _ItemValue.default.listItem
    }, this.renderItem(), isExpanded && this.renderEditItemForm(value));
  }

}

exports.default = RenderItemValue;

_defineProperty(RenderItemValue, "defaultProps", {
  level: 0,
  markers: []
});