import React from 'react';
import PatchEvent from '../../PatchEvent';
import { Path } from '../../typedefs/path';
import { Marker, Type } from '../../typedefs';
import { ArrayType, ItemValue } from './typedefs';
declare type Props = {
    type: ArrayType;
    value: ItemValue;
    level: number;
    markers: Array<Marker>;
    layout?: 'media' | 'default';
    onRemove: (arg0: ItemValue) => void;
    onChange: (arg0: PatchEvent, arg1: ItemValue) => void;
    onFocus: (arg0: Path) => void;
    onBlur: () => void;
    filterField: Function;
    readOnly: boolean | null;
    focusPath: Path;
};
export default class RenderItemValue extends React.PureComponent<Props> {
    _focusArea: HTMLDivElement | null;
    static defaultProps: {
        level: number;
        markers: any[];
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: any): void;
    handleEditStart: (event: any) => void;
    handleFocus: () => void;
    handleEditStop: () => void;
    handleKeyPress: (event: React.KeyboardEvent<any>) => void;
    handleRemove: () => void;
    handleChange: (event: PatchEvent) => void;
    getMemberType(): Type | null;
    getTitle(): string;
    setFocus(path?: Path): void;
    focus(): void;
    setFocusArea: (el: HTMLDivElement) => void;
    handleDialogAction: (action: any) => void;
    renderEditItemForm(item: ItemValue): JSX.Element;
    renderItem(): JSX.Element;
    render(): JSX.Element;
}
export {};
