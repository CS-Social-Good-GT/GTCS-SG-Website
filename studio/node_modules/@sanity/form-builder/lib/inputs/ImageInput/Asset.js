"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _dropdown = _interopRequireDefault(require("part:@sanity/components/buttons/dropdown"));

var _default = _interopRequireDefault(require("part:@sanity/components/dialogs/default"));

var _content = _interopRequireDefault(require("part:@sanity/components/dialogs/content"));

var _default2 = require("part:@sanity/components/lists/default");

var _withReferringDocuments = require("part:@sanity/base/with-referring-documents");

var _Preview = _interopRequireDefault(require("../../Preview"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _router = require("part:@sanity/base/router");

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _Asset = _interopRequireDefault(require("./styles/Asset.css"));

var _trashIcon = _interopRequireDefault(require("part:@sanity/base/trash-icon"));

var _linkIcon = _interopRequireDefault(require("part:@sanity/base/link-icon"));

var _moreVertIcon = _interopRequireDefault(require("part:@sanity/base/more-vert-icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DIALOG_DELETE_ACTION = {
  name: 'delete',
  title: 'Delete',
  icon: _trashIcon.default,
  color: 'danger'
};
var DIALOG_CLOSE_ACTION = {
  name: 'close',
  title: 'Close'
};

class Asset extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      isDeleting: false,
      dialogType: null
    });

    _defineProperty(this, "handleDeleteAsset", asset => {
      var onDeleteFinished = this.props.onDeleteFinished;
      this.setState({
        isDeleting: true
      });
      return _client.default.delete(asset._id).then(() => {
        this.setState({
          isDeleting: false
        });
        onDeleteFinished(asset._id);
      }).catch(err => {
        this.setState({
          isDeleting: false,
          dialogType: 'error'
        }); // eslint-disable-next-line

        console.error('Could not delete asset', err);
      });
    });

    _defineProperty(this, "handleDialogClose", () => {
      this.setState({
        dialogType: null
      });
    });

    _defineProperty(this, "handleMenuAction", action => {
      if (action.name === 'delete') {
        this.handleDeleteAsset(this.props.asset);
      } else if (action.name === 'showRefs') {
        this.setState({
          dialogType: 'showRefs'
        });
      }
    });

    _defineProperty(this, "handleDialogAction", action => {
      if (action.name === 'close') {
        this.handleDialogClose();
      } else if (action.name === 'delete') {
        this.handleDeleteAsset(this.props.asset);
      }
    });

    _defineProperty(this, "renderMenuItem", item => {
      var color = item.color,
          title = item.title,
          icon = item.icon;
      var Icon = icon;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: color === 'danger' ? _Asset.default.menuItemDanger : _Asset.default.menuItem
      }, icon && /*#__PURE__*/_react.default.createElement(Icon, null), "\xA0\xA0", title);
    });

    _defineProperty(this, "getDialogActions", dialogType => {
      if (dialogType != 'error') {
        return [DIALOG_DELETE_ACTION, DIALOG_CLOSE_ACTION];
      }

      return [DIALOG_CLOSE_ACTION];
    });
  }

  render() {
    var _this$props = this.props,
        asset = _this$props.asset,
        onClick = _this$props.onClick,
        onKeyPress = _this$props.onKeyPress,
        isSelected = _this$props.isSelected;
    var _this$state = this.state,
        isDeleting = _this$state.isDeleting,
        dialogType = _this$state.dialogType;
    var size = 75;
    var dpi = typeof window === 'undefined' || !window.devicePixelRatio ? 1 : Math.round(window.devicePixelRatio);
    var imgH = 100 * Math.max(1, dpi);
    var width = (0, _get2.default)(asset, 'metadata.dimensions.width') || 100;
    var height = (0, _get2.default)(asset, 'metadata.dimensions.height') || 100;
    var menuItems = [{
      name: 'showRefs',
      title: 'Show documents using this',
      icon: _linkIcon.default
    }, {
      name: 'delete',
      title: 'Delete',
      color: 'danger',
      icon: _trashIcon.default
    }];
    return /*#__PURE__*/_react.default.createElement("a", {
      className: "".concat(_Asset.default.item).concat(isSelected ? " ".concat(_Asset.default.selected) : ''),
      tabIndex: 0,
      "data-id": asset._id,
      onKeyPress: onKeyPress,
      style: {
        width: "".concat(width * size / height, "px"),
        flexGrow: width * size / height
      }
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: _Asset.default.padder,
      style: {
        paddingBottom: "".concat(height / width * 100, "%")
      }
    }), /*#__PURE__*/_react.default.createElement("img", {
      src: "".concat(asset.url, "?h=").concat(imgH, "&fit=max"),
      className: _Asset.default.image,
      onClick: onClick,
      "data-id": asset._id
    }), isDeleting && /*#__PURE__*/_react.default.createElement("div", {
      className: _Asset.default.spinnerContainer
    }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
      center: true
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: _Asset.default.menuContainer
    }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      placement: "bottom-end",
      showArrow: false,
      items: isSelected ? menuItems.filter(item => item.name !== 'delete') : menuItems,
      renderItem: this.renderMenuItem,
      onAction: this.handleMenuAction
    }, /*#__PURE__*/_react.default.createElement(_moreVertIcon.default, null)), dialogType && /*#__PURE__*/_react.default.createElement(_default.default, {
      title: dialogType === 'error' ? 'Could not delete asset' : 'Documents using this',
      color: dialogType === 'error' ? 'danger' : undefined,
      onClose: this.handleDialogClose,
      onAction: this.handleDialogAction,
      actions: this.getDialogActions(dialogType)
    }, /*#__PURE__*/_react.default.createElement(_content.default, {
      size: "medium",
      key: dialogType
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _Asset.default.dialogContent
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "".concat(asset.url, "?w=200"),
      style: {
        maxWidth: '200px'
      }
    }), /*#__PURE__*/_react.default.createElement(_withReferringDocuments.WithReferringDocuments, {
      id: asset._id
    }, (_ref) => {
      var isLoading = _ref.isLoading,
          referringDocuments = _ref.referringDocuments;
      var drafts = referringDocuments.reduce((acc, doc) => doc._id.startsWith('drafts.') ? acc.concat(doc._id.slice(7)) : acc, []);
      var filteredDocuments = referringDocuments.filter(doc => !drafts.includes(doc._id));

      if (isLoading) {
        return /*#__PURE__*/_react.default.createElement(_spinner.default, null, "Loading\u2026");
      }

      return /*#__PURE__*/_react.default.createElement("div", null, filteredDocuments.length === 0 ? /*#__PURE__*/_react.default.createElement("div", null, "No documents are referencing this asset") : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, dialogType === 'error' && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h4", {
        className: _Asset.default.dialogSubtitle
      }, filteredDocuments.length > 1 ? "".concat(filteredDocuments.length, " documents are using this asset") : 'A document is using this asset'), /*#__PURE__*/_react.default.createElement("p", {
        className: _Asset.default.referringDocumentsDescription
      }, "Open the document".concat(referringDocuments.length > 1 ? 's' : '', " and remove the asset before deleting it."))), /*#__PURE__*/_react.default.createElement(_default2.List, null, filteredDocuments.map(doc => {
        return /*#__PURE__*/_react.default.createElement(_default2.Item, {
          key: doc._id
        }, /*#__PURE__*/_react.default.createElement(_router.IntentLink, {
          intent: "edit",
          params: {
            id: doc._id
          },
          key: doc._id,
          className: _Asset.default.intentLink
        }, /*#__PURE__*/_react.default.createElement(_Preview.default, {
          value: doc,
          type: _schema.default.get(doc._type)
        }), /*#__PURE__*/_react.default.createElement("span", {
          className: _Asset.default.openDocLink
        }, /*#__PURE__*/_react.default.createElement(_linkIcon.default, null), " Open")));
      }))));
    }))))));
  }

}

exports.default = Asset;