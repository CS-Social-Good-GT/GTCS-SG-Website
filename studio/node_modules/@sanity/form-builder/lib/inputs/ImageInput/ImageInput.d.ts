import { Observable } from 'rxjs';
import React from 'react';
import PropTypes from 'prop-types';
import { Marker, Reference, Type } from '../../typedefs';
import { Path } from '../../typedefs/path';
import { ResolvedUploader, Uploader, UploaderResolver } from '../../sanity/uploads/typedefs';
import PatchEvent from '../../PatchEvent';
declare type FieldT = {
    name: string;
    type: Type;
};
export declare type AssetDocumentProps = {
    originalFilename?: string;
    label?: string;
    title?: string;
    description?: string;
    creditLine?: string;
    source?: {
        id: string;
        name: string;
        url?: string;
    };
};
export declare type AssetFromSource = {
    kind: 'assetDocumentId' | 'file' | 'base64' | 'url';
    value: string | File;
    assetDocumentProps?: AssetDocumentProps;
};
export interface Value {
    _upload?: any;
    asset?: Reference;
    hotspot?: any;
    crop?: any;
}
export declare type Props = {
    value?: Value;
    document?: Value;
    type: Type;
    level: number;
    onChange: (arg0: PatchEvent) => void;
    resolveUploader: UploaderResolver;
    materialize: (arg0: string) => Observable<Record<string, any>>;
    onBlur: () => void;
    onFocus: (path: Path) => void;
    readOnly: boolean | null;
    focusPath: Array<any>;
    markers: Array<Marker>;
};
declare type ImageInputState = {
    isUploading: boolean;
    uploadError: Error | null;
    isAdvancedEditOpen: boolean;
    selectedAssetSource?: any;
    hasFocus: boolean;
};
export default class ImageInput extends React.PureComponent<Props, ImageInputState> {
    static contextTypes: {
        getValuePath: PropTypes.Requireable<(...args: any[]) => any>;
    };
    _focusArea: any;
    uploadSubscription: any;
    state: {
        isUploading: boolean;
        uploadError: any;
        isAdvancedEditOpen: boolean;
        selectedAssetSource: any;
        hasFocus: boolean;
    };
    assetSources: any;
    constructor(props: Props);
    focus(): void;
    setFocusArea: (el: any) => void;
    isImageToolEnabled(): boolean;
    getConstrainedImageSrc: (assetDocument: Record<string, any>) => string;
    clearUploadStatus(): void;
    cancelUpload(): void;
    getUploadOptions: (file: File) => ResolvedUploader[];
    uploadFirstAccepted(fileList: FileList): void;
    uploadWith(uploader: Uploader, file: File, assetDocumentProps?: AssetDocumentProps): void;
    handleRemoveButtonClick: (event: React.SyntheticEvent<any, Event>) => void;
    handleFieldChange: (event: PatchEvent, field: FieldT) => void;
    handleStartAdvancedEdit: () => void;
    handleStopAdvancedEdit: () => void;
    handleSelectAssetFromSource: (assetFromSource: AssetFromSource) => void;
    handleFocus: (path: Path) => void;
    handleBlur: (event: any) => void;
    handleCancelUpload: () => void;
    handleSelectFile: (files: FileList) => void;
    handleUpload: ({ file, uploader }: {
        file: any;
        uploader: any;
    }) => void;
    handleSelectImageFromAssetSource: (source: any) => void;
    handleAssetSourceClosed: () => void;
    renderAdvancedEdit(fields: Array<FieldT>): JSX.Element;
    renderMaterializedAsset: (assetDocument: Record<string, any>) => JSX.Element;
    renderFields(fields: Array<FieldT>): JSX.Element[];
    renderField(field: FieldT): JSX.Element;
    renderUploadState(uploadState: any): JSX.Element;
    renderDropDownMenuItem: (item: any) => JSX.Element;
    renderSelectImageButton(): JSX.Element;
    renderAssetSource(): JSX.Element;
    render(): JSX.Element;
}
export {};
