"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _xor2 = _interopRequireDefault(require("lodash/xor"));

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _reactTippy = require("react-tippy");

var _reactMeasure = _interopRequireDefault(require("react-measure"));

var _angleDownIcon = _interopRequireDefault(require("part:@sanity/base/angle-down-icon"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _chevronDownIcon = _interopRequireDefault(require("part:@sanity/base/chevron-down-icon"));

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

var _fullscreenIcon = _interopRequireDefault(require("part:@sanity/base/fullscreen-icon"));

var _list = _interopRequireDefault(require("part:@sanity/components/validation/list"));

var _warningIcon = _interopRequireDefault(require("part:@sanity/base/warning-icon"));

var _poppable = _interopRequireDefault(require("part:@sanity/components/utilities/poppable"));

var _isMac = _interopRequireDefault(require("../utils/isMac"));

var _PrimaryGroup = _interopRequireDefault(require("./PrimaryGroup"));

var _Toolbar = _interopRequireDefault(require("./styles/Toolbar.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var collapsibleGroups = ['insertMenu', 'annotationButtons', 'decoratorButtons', 'listItemButtons'];
var BREAKPOINT_SCREEN_MEDIUM = 512;

class Toolbar extends _react.default.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "state", {
      collapsePrimaryIsOpen: false,
      collapsePrimary: false,
      showValidationTooltip: false,
      collapsedGroups: [],
      lastContentWidth: -1,
      isMobile: false
    });

    _defineProperty(this, "_primaryToolbar", _react.default.createRef());

    _defineProperty(this, "handleOpenPrimary", () => {
      this.setState({
        collapsePrimaryIsOpen: true
      });
    });

    _defineProperty(this, "handleClosePrimary", () => {
      this.setState({
        collapsePrimaryIsOpen: false
      });
    });

    _defineProperty(this, "handleClickOutsidePrimary", () => {
      this.setState({
        collapsePrimaryIsOpen: false
      });
    });

    _defineProperty(this, "handleFocus", focusPath => {
      var onFocus = this.props.onFocus;
      onFocus(focusPath);
    });

    _defineProperty(this, "handleCloseValidationResults", () => {
      this.setState({
        showValidationTooltip: false
      });
    });

    _defineProperty(this, "handleToggleValidationResults", () => {
      this.setState(prevState => ({
        showValidationTooltip: !prevState.showValidationTooltip
      }));
    });

    _defineProperty(this, "handleResize", (0, _debounce2.default)(() => {
      if (this.state.isMobile) return;
      var _primaryToolbar = this._primaryToolbar;
      var _this$state = this.state,
          collapsedGroups = _this$state.collapsedGroups,
          lastContentWidth = _this$state.lastContentWidth,
          collapsePrimary = _this$state.collapsePrimary;
      if (!_primaryToolbar || !_primaryToolbar.current) return;
      var width = _primaryToolbar.current.offsetWidth;
      var contentWidth = _primaryToolbar.current.scrollWidth;

      if (contentWidth > width && !collapsePrimary) {
        var groupToCollapse = (0, _xor2.default)(collapsibleGroups, collapsedGroups)[0];
        this.setState({
          collapsedGroups: [...collapsedGroups, groupToCollapse],
          lastContentWidth: contentWidth
        }, () => {
          if (contentWidth > width && collapsedGroups.length != collapsibleGroups.length) {
            this.handleResize();
          } else if (collapsedGroups.length === collapsibleGroups.length && contentWidth > width) {
            this.setState({
              collapsePrimary: true
            });
          }
        });
      }

      if (collapsePrimary && lastContentWidth < width) {
        this.setState({
          collapsePrimary: false,
          collapsePrimaryIsOpen: false
        });
      }

      if (width >= lastContentWidth && collapsedGroups.length != 0) {
        this.setState({
          collapsedGroups: []
        });
      }
    }, 50));

    if (window) {
      this.state = _objectSpread(_objectSpread({}, this.state), {}, {
        isMobile: window.innerWidth < BREAKPOINT_SCREEN_MEDIUM
      });
    }
  }

  render() {
    var _this$props = this.props,
        blockContentFeatures = _this$props.blockContentFeatures,
        editor = _this$props.editor,
        fullscreen = _this$props.fullscreen,
        isDragging = _this$props.isDragging,
        markers = _this$props.markers,
        onToggleFullScreen = _this$props.onToggleFullScreen,
        type = _this$props.type;

    if (!editor) {
      return null;
    }

    var _this$state2 = this.state,
        showValidationTooltip = _this$state2.showValidationTooltip,
        isMobile = _this$state2.isMobile;
    var insertItems = blockContentFeatures.types.inlineObjects.concat(blockContentFeatures.types.blockObjects);
    var validation = markers.filter(marker => marker.type === 'validation');
    var errors = validation.filter(marker => marker.level === 'error');
    var warnings = validation.filter(marker => marker.level === 'warning');
    var _this$state3 = this.state,
        collapsedGroups = _this$state3.collapsedGroups,
        collapsePrimary = _this$state3.collapsePrimary,
        collapsePrimaryIsOpen = _this$state3.collapsePrimaryIsOpen;
    var className = (0, _classnames.default)(_Toolbar.default.root, fullscreen && _Toolbar.default.fullscreen);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: className
    }, /*#__PURE__*/_react.default.createElement(_reactMeasure.default, {
      offset: true,
      scroll: true,
      onResize: this.handleResize
    }, (_ref) => {
      var measureRef = _ref.measureRef;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: _Toolbar.default.inner,
        ref: measureRef,
        style: {
          pointerEvents: isDragging ? 'none' : 'unset'
        }
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _Toolbar.default.primary,
        ref: this._primaryToolbar
      }, collapsePrimary && /*#__PURE__*/_react.default.createElement(_default2.default, {
        className: _Toolbar.default.showMoreButton,
        onClick: this.handleOpenPrimary,
        kind: "simple"
      }, "Show menu\xA0", /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_angleDownIcon.default, {
        color: "inherit"
      })), /*#__PURE__*/_react.default.createElement(_poppable.default, {
        onClickOutside: this.handleClosePrimary,
        onEscape: this.handleClosePrimary
      }, collapsePrimaryIsOpen && /*#__PURE__*/_react.default.createElement(_PrimaryGroup.default, _extends({}, this.props, {
        isPopped: true,
        collapsedGroups: collapsedGroups,
        insertItems: insertItems
      })))), /*#__PURE__*/_react.default.createElement("div", {
        className: _Toolbar.default.primaryInner
      }, !collapsePrimary && /*#__PURE__*/_react.default.createElement(_PrimaryGroup.default, _extends({}, this.props, {
        collapsedGroups: collapsedGroups,
        insertItems: insertItems,
        isMobile: isMobile
      })))), /*#__PURE__*/_react.default.createElement("div", {
        className: _Toolbar.default.secondary
      }, fullscreen && (errors.length > 0 || warnings.length > 0) && /*#__PURE__*/_react.default.createElement(_reactTippy.Tooltip, {
        arrow: true,
        duration: 100,
        html: /*#__PURE__*/_react.default.createElement(_list.default, {
          markers: validation,
          showLink: true,
          isOpen: showValidationTooltip,
          documentType: type,
          onClose: this.handleCloseValidationResults,
          onFocus: this.handleFocus
        }),
        interactive: true,
        onRequestClose: this.handleCloseValidationResults,
        open: showValidationTooltip,
        position: "bottom",
        style: {
          padding: 0
        },
        theme: "light",
        trigger: "click"
      }, /*#__PURE__*/_react.default.createElement(_default2.default, {
        color: "danger",
        icon: _warningIcon.default,
        kind: "simple",
        onClick: this.handleToggleValidationResults,
        padding: "small"
      }, errors.length, /*#__PURE__*/_react.default.createElement("span", {
        style: {
          paddingLeft: '0.5em'
        }
      }, /*#__PURE__*/_react.default.createElement(_chevronDownIcon.default, null)))), /*#__PURE__*/_react.default.createElement("div", {
        className: _Toolbar.default.fullscreenButtonContainer
      }, /*#__PURE__*/_react.default.createElement(_default2.default, {
        kind: "simple",
        onClick: onToggleFullScreen,
        title: "Open in fullscreen (".concat(_isMac.default ? 'cmd' : 'ctrl', "+enter)"),
        icon: fullscreen ? _closeIcon.default : _fullscreenIcon.default,
        bleed: true
      }))));
    }));
  }

}

var _default = Toolbar;
exports.default = _default;