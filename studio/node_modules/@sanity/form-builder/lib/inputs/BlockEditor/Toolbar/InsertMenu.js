"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _dropdown = _interopRequireDefault(require("part:@sanity/components/buttons/dropdown"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _blockObjectIcon = _interopRequireDefault(require("part:@sanity/base/block-object-icon"));

var _inlineObjectIcon = _interopRequireDefault(require("part:@sanity/base/inline-object-icon"));

var _reactTippy = require("react-tippy");

var _InsertMenu = _interopRequireDefault(require("./styles/InsertMenu.css"));

var _paths = require("@sanity/util/paths");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class InsertMenu extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "renderItem", item => {
      var Icon = item.icon;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: _InsertMenu.default.item
      }, Icon && /*#__PURE__*/_react.default.createElement("div", {
        className: _InsertMenu.default.icon
      }, /*#__PURE__*/_react.default.createElement(Icon, null)), item.title);
    });

    _defineProperty(this, "renderButton", item => {
      var showLabels = this.props.showLabels;
      return /*#__PURE__*/_react.default.createElement(_reactTippy.Tooltip, {
        title: "Insert ".concat(item.title),
        disabled: this.props.collapsed,
        key: "insertMenuItem_".concat(item.key),
        style: showLabels ? {
          display: 'block',
          flexGrow: 1,
          minWidth: 'fit-content'
        } : {}
      }, /*#__PURE__*/_react.default.createElement(_default.default, {
        onClick: () => this.handleOnAction(item),
        title: "Insert ".concat(item.title),
        "aria-label": "Insert ".concat(item.title),
        icon: item.icon,
        kind: "simple",
        bleed: true
      }, showLabels && item.title));
    });

    _defineProperty(this, "getIcon", (type, fallbackIcon) => {
      var referenceIcon = (0, _get2.default)(type, 'to[0].icon');
      return type.icon || type.type && type.type.icon || referenceIcon || fallbackIcon;
    });

    _defineProperty(this, "handleOnAction", item => {
      var _this$props = this.props,
          onFocus = _this$props.onFocus,
          editor = _this$props.editor;

      if (item.isInline) {
        editor.command('insertInlineObject', {
          objectType: item.value
        });
        setTimeout(() => onFocus([{
          _key: editor.value.focusBlock.key
        }, 'children', {
          _key: editor.value.focusInline.key
        }, _paths.FOCUS_TERMINATOR]), 200);
      } else {
        editor.command('insertBlockObject', {
          objectType: item.value
        });
        setTimeout(() => onFocus([{
          _key: editor.value.focusBlock.key
        }, _paths.FOCUS_TERMINATOR]), 200);
      }
    });
  }

  shouldComponentUpdate(nextProps) {
    return this.props.collapsed !== nextProps.collapsed || this.props.blockTypes !== nextProps.blockTypes || this.props.inlineTypes !== nextProps.inlineTypes || this.props.editorValue.focusBlock !== nextProps.editorValue.focusBlock;
  }

  getItems() {
    var editor = this.props.editor;
    var focusBlock = editor.value.focusBlock;
    var keyCount = 0;
    var blockItems = this.props.blockTypes.map((type, index) => ({
      title: type.title,
      value: type,
      key: (keyCount++).toString(),
      icon: this.getIcon(type, _blockObjectIcon.default),
      isInline: false,
      isDisabled: false
    }));
    var inlineItems = this.props.inlineTypes.map((type, index) => ({
      title: type.title,
      icon: this.getIcon(type, _inlineObjectIcon.default),
      value: type,
      key: (keyCount++).toString(),
      isInline: true,
      isDisabled: focusBlock ? editor.query('isVoid', focusBlock) : true
    }));
    return blockItems.concat(inlineItems);
  }

  render() {
    var collapsed = this.props.collapsed;
    var items = this.getItems();

    if (!collapsed) {
      return items.map(this.renderButton);
    }

    return /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      items: items,
      renderItem: this.renderItem,
      onAction: this.handleOnAction,
      kind: "simple"
    }, "Insert");
  }

}

exports.default = InsertMenu;