/// <reference types="lodash" />
import React, { RefObject } from 'react';
import { BlockContentFeatures, Marker, SlateEditor, SlateValue, Type } from '../typeDefs';
import { Path } from '../../../typedefs/path';
declare type Props = {
    blockContentFeatures: BlockContentFeatures;
    editor: SlateEditor;
    editorValue: SlateValue;
    fullscreen: boolean;
    onFocus: (path: Path) => void;
    onToggleFullScreen: (event: React.SyntheticEvent<any>) => void;
    markers: Marker[];
    type: Type;
    isDragging: boolean;
    userIsWritingText: boolean;
};
declare type ToolbarState = {
    collapsePrimaryIsOpen: boolean;
    collapsePrimary: boolean;
    showValidationTooltip: boolean;
    collapsedGroups: any[];
    lastContentWidth: number;
    isMobile: boolean;
};
declare class Toolbar extends React.PureComponent<Props, ToolbarState> {
    state: {
        collapsePrimaryIsOpen: boolean;
        collapsePrimary: boolean;
        showValidationTooltip: boolean;
        collapsedGroups: any[];
        lastContentWidth: number;
        isMobile: boolean;
    };
    _primaryToolbar: RefObject<any>;
    constructor(props: Props);
    handleOpenPrimary: () => void;
    handleClosePrimary: () => void;
    handleClickOutsidePrimary: () => void;
    handleFocus: (focusPath: []) => void;
    handleCloseValidationResults: () => void;
    handleToggleValidationResults: () => void;
    handleResize: (() => void) & import("lodash").Cancelable;
    render(): JSX.Element;
}
export default Toolbar;
