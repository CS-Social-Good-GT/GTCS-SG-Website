import React, { RefObject } from 'react';
import { PatchEvent } from '../../PatchEvent';
import { BlockArrayType, BlockContentFeatures, FormBuilderValue, Marker, RenderBlockActions, RenderCustomMarkers, SlateEditor, SlateValue, Type, UndoRedoStack } from './typeDefs';
import { Path } from '../../typedefs/path';
declare type Props = {
    blockContentFeatures: BlockContentFeatures;
    editorValue: SlateValue;
    focusPath: [];
    level: number;
    markers: Marker[];
    onBlur: () => void;
    onChange: (editor: SlateEditor, callback?: (arg0: void) => void) => void;
    onFocus: (arg0: Path) => void;
    onLoading: (props: {}) => void;
    onPatch: (event: PatchEvent) => void;
    onPaste?: (arg0: {
        event: React.SyntheticEvent;
        path: [];
        type: Type;
        value: FormBuilderValue[] | null;
    }) => {
        insert?: FormBuilderValue[];
        path?: [];
    };
    isLoading: boolean;
    readOnly?: boolean;
    renderBlockActions?: RenderBlockActions;
    renderCustomMarkers?: RenderCustomMarkers;
    type: BlockArrayType;
    undoRedoStack: UndoRedoStack;
    value: FormBuilderValue[] | null;
    userIsWritingText: boolean;
};
declare type BlockEditorInputState = {
    fullscreen: boolean;
};
export default class BlockEditorInput extends React.Component<Props, BlockEditorInputState> {
    static defaultProps: {
        readOnly: boolean;
        renderBlockActions: any;
        renderCustomMarkers: any;
        onPaste: any;
    };
    inputId: string;
    blockEditor: RefObject<any>;
    state: {
        fullscreen: boolean;
    };
    handleToggleFullScreen: (event?: React.SyntheticEvent<any, Event>) => void;
    focus: () => void;
    handleFocusSkipper: () => void;
    render(): JSX.Element;
}
export {};
