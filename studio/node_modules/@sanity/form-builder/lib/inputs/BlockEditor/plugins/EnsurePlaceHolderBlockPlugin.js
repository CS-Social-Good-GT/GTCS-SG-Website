"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EnsurePlaceHolderBlockPlugin;

var _createEmptyBlock = _interopRequireDefault(require("../utils/createEmptyBlock"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function EnsurePlaceHolderBlockPlugin(blockContentFeatures) {
  return {
    onCommand(command, editor, next) {
      if (command.type !== 'ensurePlaceHolderBlock') {
        return next();
      }

      if (editor.value.document.nodes.size !== 0) {
        return next();
      }

      var block = (0, _createEmptyBlock.default)(blockContentFeatures);
      var node = block.toJSON({
        preserveKeys: true,
        preserveData: true
      });
      node.data = _objectSpread(_objectSpread({}, node.data), {}, {
        placeholder: true
      });
      editor.applyOperation({
        type: 'insert_node',
        path: [0],
        node: node
      });
      return editor;
    }

  };
}