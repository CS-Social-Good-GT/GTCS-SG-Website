"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TextBlockOnEnterKeyPlugin;

var _blockTools = require("@sanity/block-tools");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// This plugin inserts an empty default block after enter is pressed
// within a block which is not a default block type.
// I.e: when enter is pressed after a title, start a new empty normal block below
function TextBlockOnEnterKeyPlugin() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaultBlock = options.defaultBlock;

  if (!defaultBlock) {
    throw new Error("Missing required option 'defaultBlock'");
  }

  return {
    onKeyDown(event, editor, next) {
      var key = event.key,
          shiftKey = event.shiftKey;

      if (key !== 'Enter' || shiftKey) {
        return next();
      }

      var value = editor.value;
      var isTextBlock = value.blocks.some(block => block.data.get('style'));
      var isListNode = value.blocks.some(block => block.data.get('listItem'));
      var startBlock = value.startBlock;

      if (isListNode || !isTextBlock || value.selection.isExpanded || !value.selection.end.isAtEndOfNode(startBlock)) {
        return next();
      }

      var blocKey = (0, _blockTools.randomKey)(12);
      event.preventDefault();
      editor.insertBlock(_objectSpread(_objectSpread({}, defaultBlock), {}, {
        key: blocKey,
        data: _objectSpread(_objectSpread({}, defaultBlock.data), {}, {
          _key: blocKey
        })
      }));
      return editor;
    }

  };
}