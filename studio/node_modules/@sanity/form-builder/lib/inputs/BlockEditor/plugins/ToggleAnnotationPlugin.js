"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ToggleAnnotationPlugin;

var _blockTools = require("@sanity/block-tools");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// This plugin toggles an annotation on the selected content
function ToggleAnnotationPlugin() {
  return {
    // eslint-disable-next-line complexity
    onCommand(command, editor, next) {
      if (command.type !== 'toggleAnnotation') {
        return next();
      }

      var spans = editor.value.inlines.filter(inline => inline.type === 'span');
      var options = command.args[0] || {};
      var annotationName = options.annotationName;
      var key = options.key || (0, _blockTools.randomKey)(12); // Add annotation

      if (spans.size === 0) {
        return editor.command('wrapSpan', {
          key,
          annotationName
        });
      } // Remove annotation


      spans.forEach(span => {
        var annotations = span.data.get('annotations');

        if (!annotations || !annotations[annotationName]) {
          return;
        } // Remove the whole span if this annotation is the only one left


        if (Object.keys(annotations).length === 1 && annotations[annotationName]) {
          editor.unwrapInlineByKey(span.key);
          return;
        } // If several annotations, remove only this one and leave the span node intact


        Object.keys(annotations).forEach(name => {
          if (annotations[name]._type === annotationName) {
            delete annotations[name];
          }
        });

        var data = _objectSpread(_objectSpread({}, span.data.toObject()), {}, {
          focusedAnnotationName: undefined,
          annotations: annotations
        });

        editor.setNodeByKey(span.key, {
          data
        });
      });
      return editor;
    }

  };
}