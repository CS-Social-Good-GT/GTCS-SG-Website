"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SetMarksOnKeyComboPlugin;
exports.keyMaps = void 0;

var _isHotkey = _interopRequireWildcard(require("is-hotkey"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// This plugin makes keyboard shortcuts for decorators
var isStrongHotkey = (0, _isHotkey.default)('mod+b');
var isEmphasisHotkey = (0, _isHotkey.default)('mod+i');
var isUnderlinedHotkey = (0, _isHotkey.default)('mod+u');
var isCodeHotKey = (0, _isHotkey.default)("mod+'");
var modKeyPlatformName = (0, _isHotkey.toKeyName)('mod');
var keyMaps = {
  strong: "".concat(modKeyPlatformName, " + b"),
  em: "".concat(modKeyPlatformName, " + i"),
  underline: "".concat(modKeyPlatformName, " + u"),
  code: "".concat(modKeyPlatformName, " + '")
};
exports.keyMaps = keyMaps;

function SetMarksOnKeyComboPlugin() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var decorators = options.decorators || [];
  return {
    onKeyDown(event, editor, next) {
      var mark;

      if (isStrongHotkey(event)) {
        mark = 'strong';
      } else if (isEmphasisHotkey(event)) {
        mark = 'em';
      } else if (isUnderlinedHotkey(event)) {
        mark = 'underline';
      } else if (isCodeHotKey(event)) {
        mark = 'code';
      } else {
        return next();
      } // Return if not supported by schema


      if (!decorators.includes(mark)) {
        return next();
      }

      event.preventDefault();
      return editor.toggleMark(mark);
    }

  };
}