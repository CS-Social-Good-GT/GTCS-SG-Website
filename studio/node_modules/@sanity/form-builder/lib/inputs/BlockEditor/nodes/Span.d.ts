import React from 'react';
import { Inline } from 'slate';
import { BlockContentFeatures, Type, Marker, SlateEditor } from '../typeDefs';
import PatchEvent from '../../../PatchEvent';
import { Path } from '../../../typedefs/path';
declare type Props = {
    attributes: any;
    blockContentFeatures: BlockContentFeatures;
    editor: SlateEditor;
    children: React.ReactNode;
    node: Inline;
    onPatch: (event: PatchEvent, annotation: any) => void;
    markers: Marker[];
    onFocus: (arg0: Path) => void;
    readOnly?: boolean;
    type: Type | null;
};
declare type State = {
    focusedAnnotationName: string | null;
};
export default class Span extends React.Component<Props, State> {
    static defaultProps: {
        readOnly: boolean;
    };
    _clickCounter: number;
    _isMarkingText: boolean;
    constructor(props: Props);
    getAnnotations(): any;
    focusAnnotation(annotationName: string): void;
    handleMouseDown: () => void;
    handleInvalidValue: (event: PatchEvent) => void;
    startEditing(): void;
    handleView: () => void;
    handleMouseUp: () => void;
    handleInvalidTypeContainerClick: (event: any) => void;
    handleClick: () => void;
    getFirstAnnotation(): any;
    render(): JSX.Element;
}
export {};
