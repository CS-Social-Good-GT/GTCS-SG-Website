import React from 'react';
import { Block } from 'slate';
import { BlockContentFeatures, FormBuilderValue, Marker, Path, RenderCustomMarkers, SlateEditor, SlateNode, Type } from '../typeDefs';
import { PatchEvent } from '../../../PatchEvent';
declare type DropDownButtonItem = {
    title: string;
    color: string;
    icon: any | null;
    intent: any;
    params: any;
    name: string;
};
declare type Props = {
    attributes: any;
    blockContentFeatures: BlockContentFeatures;
    editor: SlateEditor;
    isSelected?: boolean;
    markers: Marker[];
    node: Block;
    onFocus: (arg0: Path) => void;
    onHideBlockDragMarker: (arg0: void) => void;
    onPatch: (event: PatchEvent, value?: FormBuilderValue[]) => void;
    onShowBlockDragMarker: (pos: string, node: HTMLDivElement) => void;
    readOnly: boolean | null;
    blockActions?: Node;
    renderCustomMarkers?: RenderCustomMarkers;
    type: Type | null;
};
declare type State = {
    isDragging: boolean;
};
export default class BlockObject extends React.Component<Props, State> {
    _dropTarget: {
        node: SlateNode;
        position: string;
    } | null;
    _editorNode: HTMLElement | null;
    _dragGhost: HTMLElement | null;
    previewContainer: HTMLDivElement | null;
    static defaultProps: {
        blockActions: any;
        renderCustomMarkers: any;
        isSelected: boolean;
    };
    state: {
        isDragging: boolean;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    addDragHandlers(): void;
    removeDragHandlers(): void;
    handleDragStart: (event: React.DragEvent<HTMLElement>) => void;
    handleDragLeave: (event: DragEvent) => void;
    resetDropTarget(): void;
    handleDragOverOtherNode: (event: DragEvent) => void;
    handleDragEnd: (event: React.DragEvent<Element>) => void;
    handleCancelEvent: (event: React.SyntheticEvent<Element, Event>) => void;
    handleFocus: (event: React.MouseEvent<Element, MouseEvent>) => void;
    handleDoubleClick: (event: React.MouseEvent<Element, MouseEvent>) => void;
    handleEditStart: () => void;
    handleClose: () => void;
    refPreview: (previewContainer: HTMLDivElement) => void;
    getValue(): any;
    handleInvalidValue: (event: PatchEvent) => void;
    handleHeaderMenuAction: (item: DropDownButtonItem) => void;
    handleView: () => void;
    renderMenuItem: (item: DropDownButtonItem) => JSX.Element;
    handleMouseDown: (event: React.MouseEvent<Element, MouseEvent>) => void;
    renderPreview: (value: any) => JSX.Element;
    handleInvalidTypeContainerClick: (event: any) => void;
    render(): JSX.Element;
}
export {};
