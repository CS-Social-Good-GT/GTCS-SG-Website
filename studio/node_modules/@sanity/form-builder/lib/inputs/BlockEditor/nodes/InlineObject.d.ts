/// <reference types="lodash" />
import React from 'react';
import { BlockContentFeatures, FormBuilderValue, Marker, Path, SlateEditor, SlateNode, SlateSelection, Type } from '../typeDefs';
import { PatchEvent } from '../../../PatchEvent';
import { Block } from 'slate';
declare type Props = {
    attributes: any;
    blockContentFeatures: BlockContentFeatures;
    editor: SlateEditor;
    isSelected?: boolean;
    markers: Marker[];
    node: Block;
    onFocus: (arg0: Path) => void;
    onPatch: (event: PatchEvent, value?: FormBuilderValue[]) => void;
    readOnly?: boolean;
    type: Type | null;
};
declare type State = {
    isDragging: boolean;
};
export default class InlineObject extends React.Component<Props, State> {
    static defaultProps: {
        isSelected: boolean;
        readOnly: boolean;
    };
    _dropTarget: {
        node: SlateNode;
        selection: SlateSelection;
    } | null;
    _editorNode: HTMLElement | null;
    _previewContainer: HTMLElement | null;
    state: {
        isDragging: boolean;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    addDragHandlers(): void;
    removeDragHandlers(): void;
    handleDragStart: (event: React.DragEvent<Element>) => void;
    handleDragLeave: (event: DragEvent) => void;
    resetDropTarget(): void;
    restoreSelection(): void;
    handleDragOverOtherNode: (event: DragEvent) => void;
    moveCursor: ((range: any, node: any) => any) & import("lodash").Cancelable;
    handleDragEnd: (event: React.DragEvent<Element>) => void;
    handleInvalidValue: (event: PatchEvent) => void;
    handleCancelEvent: (event: React.SyntheticEvent<Element, Event>) => void;
    handleEditStart: (event: React.MouseEvent<Element, MouseEvent>) => void;
    handleView: () => void;
    refPreviewContainer: (elm: HTMLSpanElement) => void;
    getValue(): any;
    handleInvalidTypeContainerClick: (event: any) => void;
    render(): JSX.Element;
}
export {};
