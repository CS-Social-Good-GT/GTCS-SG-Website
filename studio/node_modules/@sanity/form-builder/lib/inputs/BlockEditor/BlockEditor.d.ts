/// <reference types="lodash" />
import React, { RefObject } from 'react';
import Editor from './Editor';
import { BlockContentFeatures, FormBuilderValue, Marker, RenderBlockActions, RenderCustomMarkers, SlateEditor, SlateNode, SlateValue, Type, UndoRedoStack } from './typeDefs';
import { PatchEvent } from '../../PatchEvent';
import { Path } from '../../typedefs/path';
declare type Props = {
    blockContentFeatures: BlockContentFeatures;
    editorValue: SlateValue;
    fullscreen: boolean;
    isActive: boolean;
    focusPath: Path;
    markers: Marker[];
    onPatch: (event: PatchEvent) => void;
    isLoading: boolean;
    onChange: (editor: SlateEditor, callback?: (arg0: void) => void) => void;
    onBlur: () => void;
    onFocus: (arg0: Path) => void;
    onLoading: (props: {}) => void;
    onPaste?: (arg0: {
        event: React.SyntheticEvent;
        path: [];
        type: Type;
        value: FormBuilderValue[] | null;
    }) => {
        insert?: FormBuilderValue[];
        path?: [];
    };
    onToggleFullScreen: (event: React.SyntheticEvent<any>) => void;
    readOnly?: boolean;
    renderBlockActions?: RenderBlockActions;
    renderCustomMarkers?: RenderCustomMarkers;
    setFocus: (arg0: void) => void;
    type: Type;
    value: FormBuilderValue[] | null;
    undoRedoStack: UndoRedoStack;
    userIsWritingText: boolean;
};
declare type State = {
    preventScroll: boolean;
    isDragging: boolean;
};
export default class BlockEditor extends React.PureComponent<Props, State> {
    state: {
        preventScroll: boolean;
        isDragging: boolean;
    };
    static defaultProps: {
        readOnly: boolean;
        onPaste: any;
        renderBlockActions: any;
        renderCustomMarkers: any;
    };
    scrollContainer: RefObject<HTMLDivElement>;
    editor: RefObject<Editor>;
    editorWrapper: RefObject<HTMLDivElement>;
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    renderNodeEditor(): JSX.Element;
    renderEditNode(nodeValue: any, type: Type, path: Path, slateNode: SlateNode): JSX.Element;
    checkScrollHeight: () => void;
    getEditor(): any;
    handleOnDragEnter: (event: React.DragEvent<Element>) => void;
    handleOnDragLeave: ((event: React.DragEvent<Element>) => void) & import("lodash").Cancelable;
    renderEditor(): JSX.Element;
    renderReadOnlyFullscreenButton(): JSX.Element;
    renderBlockEditor(): JSX.Element;
    handleToggleFullscreen: (event: React.SyntheticEvent<any, Event>) => void;
    render(): JSX.Element;
}
export {};
