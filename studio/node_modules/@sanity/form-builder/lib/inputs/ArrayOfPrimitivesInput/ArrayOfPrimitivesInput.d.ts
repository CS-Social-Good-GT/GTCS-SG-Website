import React from 'react';
import Fieldset from 'part:@sanity/components/fieldsets/default';
import { PatchEvent } from '../../PatchEvent';
import { Path } from '../../typedefs/path';
import { Marker, Type } from '../../typedefs';
declare type Props = {
    type: Type;
    value: Array<string | number | boolean>;
    level: number;
    onChange: (event: PatchEvent) => void;
    onFocus: (arg0: Path) => void;
    onBlur: () => void;
    focusPath: Path;
    readOnly: boolean | null;
    markers: Array<Marker>;
};
export default class ArrayOfPrimitivesInput extends React.PureComponent<Props> {
    _element: Fieldset | null;
    _lastAddedIndex: number;
    set(nextValue: any[]): void;
    removeAt(index: number): void;
    handleAppend: (itemValue: any) => void;
    handlePrepend: (itemValue: any) => void;
    insertAt(index: any, type: any): void;
    handleRemoveItem: (index: number) => void;
    handleItemChange: (event: any) => void;
    handleItemEnterKey: (index: any) => void;
    handleItemEscapeKey: (index: any) => void;
    handleSortEnd: (event: any) => void;
    getMemberType(typeName: any): any;
    renderItem: (item: any, index: any) => JSX.Element;
    renderList(value: any): JSX.Element;
    setElement: (el: Fieldset) => void;
    focus(): void;
    handleFocusItem: (index: any) => void;
    render(): JSX.Element;
}
export {};
