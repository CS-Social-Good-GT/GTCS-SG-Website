"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _speakingurl = _interopRequireDefault(require("speakingurl"));

var _paths = require("@sanity/util/paths");

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _default4 = _interopRequireDefault(require("part:@sanity/components/textinputs/default"));

var _PatchEvent = require("../../PatchEvent");

var _withDocument = _interopRequireDefault(require("../../utils/withDocument"));

var _withValuePath = _interopRequireDefault(require("../../utils/withValuePath"));

var _SlugInput = _interopRequireDefault(require("./styles/SlugInput.css"));

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Fallback slugify function if not defined in field options
function defaultSlugify(value, type) {
  var maxLength = type.options && type.options.maxLength || 200;
  var slugifyOpts = {
    truncate: maxLength,
    symbols: true
  };
  return value ? (0, _speakingurl.default)(value, slugifyOpts) : '';
}

var defaultState = {
  inputText: undefined,
  loading: false
};

var _default = (0, _withValuePath.default)((0, _withDocument.default)((_temp = _class = class SlugInput extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_textInput", void 0);

    _defineProperty(this, "_isMounted", void 0);

    _defineProperty(this, "state", defaultState);

    _defineProperty(this, "setTextInput", input => {
      this._textInput = input;
    });

    _defineProperty(this, "handleChange", event => {
      this.updateCurrent(event.target.value);
    });

    _defineProperty(this, "handleFocusCurrent", event => {
      this.props.onFocus(['current']);
    });

    _defineProperty(this, "handleGenerateSlug", () => {
      var type = this.props.type;
      var source = (0, _paths.get)(type, ['options', 'source']);

      if (!source) {
        // eslint-disable-next-line no-console
        console.error("Source is missing. Check source on type \"".concat(type.name, "\" in schema"));
        return;
      }

      this.setState({
        loading: true
      });
      this.getNewFromSource().then(newFromSource => this.slugify(newFromSource || '')).then(newSlug => this.updateCurrent(newSlug)).catch(err => {
        // eslint-disable-next-line no-console
        console.error("An error occured while slugifying:\n".concat(err.message, "\n").concat(err.stack));
      }).then(() => this._isMounted && this.setState({
        loading: false
      }));
    });

    _defineProperty(this, "hasSource", () => {
      var _this$props = this.props,
          type = _this$props.type,
          document = _this$props.document;
      var source = (0, _paths.get)(type, ['options', 'source'], []);
      return typeof source === 'function' ? true : Boolean((0, _paths.get)(document, source));
    });

    _defineProperty(this, "getNewFromSource", () => {
      var _this$props2 = this.props,
          getValuePath = _this$props2.getValuePath,
          type = _this$props2.type,
          document = _this$props2.document;
      var parentPath = getValuePath().slice(0, -1);
      var parent = (0, _paths.get)(document, parentPath);
      var source = (0, _paths.get)(type, ['options', 'source'], []);
      return Promise.resolve(typeof source === 'function' ? source(document, {
        parentPath,
        parent
      }) : (0, _paths.get)(document, source));
    });
  }

  componentDidMount() {
    this._isMounted = true;
  }

  componentWillUnmount() {
    this._isMounted = false;
  }

  updateCurrent(current) {
    var _this$props3 = this.props,
        onChange = _this$props3.onChange,
        type = _this$props3.type;

    if (!current) {
      onChange(_PatchEvent.PatchEvent.from((0, _PatchEvent.unset)([])));
      return;
    }

    onChange(_PatchEvent.PatchEvent.from((0, _PatchEvent.setIfMissing)({
      _type: type.name
    }), (0, _PatchEvent.set)(current, ['current'])));
  }

  slugify(sourceValue) {
    if (!sourceValue) {
      return Promise.resolve(sourceValue);
    }

    var type = this.props.type;
    var slugify = (0, _paths.get)(type, ['options', 'slugify'], defaultSlugify);
    return Promise.resolve(slugify(sourceValue, type));
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    var document = nextProps.document; // Reset state if document is changed

    var oldDocId = this.props.document._id;
    var newDocId = document._id;

    if (oldDocId !== newDocId) {
      this.setState(defaultState);
    }
  }

  focus() {
    if (this._textInput) {
      this._textInput.focus();
    }
  }

  render() {
    var _this$props4 = this.props,
        value = _this$props4.value,
        type = _this$props4.type,
        level = _this$props4.level,
        markers = _this$props4.markers,
        readOnly = _this$props4.readOnly;
    var _this$state = this.state,
        loading = _this$state.loading,
        inputText = _this$state.inputText;
    var hasSourceField = type.options && type.options.source;
    var formFieldProps = {
      label: type.title,
      description: type.description,
      level: level,
      markers
    };
    var validation = markers.filter(marker => marker.type === 'validation');
    var errors = validation.filter(marker => marker.level === 'error');
    return /*#__PURE__*/_react.default.createElement(_default3.default, formFieldProps, /*#__PURE__*/_react.default.createElement("div", {
      className: _SlugInput.default.wrapper
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _SlugInput.default.input
    }, /*#__PURE__*/_react.default.createElement(_default4.default, {
      ref: this.setTextInput,
      customValidity: errors.length > 0 ? errors[0].item.message : '',
      disabled: loading,
      placeholder: type.placeholder,
      onChange: this.handleChange,
      onFocus: this.handleFocusCurrent,
      value: typeof inputText === 'string' ? inputText : value.current,
      readOnly: readOnly
    })), hasSourceField && /*#__PURE__*/_react.default.createElement(_default2.default, {
      className: _SlugInput.default.button,
      inverted: true,
      disabled: readOnly || loading || !this.hasSource(),
      loading: loading,
      onClick: this.handleGenerateSlug
    }, "Generate")));
  }

}, _defineProperty(_class, "defaultProps", {
  value: {
    current: undefined
  },
  readOnly: false,

  onChange() {},

  markers: []
}), _temp)));

exports.default = _default;