import React from 'react';
import PatchEvent from '../../../PatchEvent';
import { Reference, Type, Marker } from '../../typedefs';
import { Path } from '../../typedefs/path';
import { ObservableI } from '../../typedefs/observable';
declare type SanityDocument = {
    _id: string;
    _type: string;
    [key: string]: any;
};
declare type SearchHit = {
    _id: string;
    _type: string;
};
declare type PreviewSnapshot = {
    title: string;
    description: string;
};
declare type SearchOptions = {
    filter?: string;
    params?: {
        [key: string]: any;
    };
};
declare type FilterResolver = (options: {
    document: SanityDocument;
    parent?: object | object[];
    parentPath: Path;
}) => SearchOptions;
declare type SearchTypeOptions = {
    filter?: string | FilterResolver;
    filterParams?: {
        [key: string]: any;
    };
};
export declare type Props = {
    value?: Reference;
    type: Type & {
        options?: SearchTypeOptions;
    };
    markers: Array<Marker>;
    readOnly?: boolean;
    onSearch: (query: string, type: Type, options: SearchOptions) => ObservableI<Array<SearchHit>>;
    getPreviewSnapshot: (Reference: any, Type: any) => ObservableI<PreviewSnapshot>;
    onChange: (event: PatchEvent) => void;
    level: number;
    document: SanityDocument;
    getValuePath: () => Path;
};
declare const _default: {
    new <P>(props: Readonly<P>): {
        _input: any;
        focus(): void;
        setInput: (input: any) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<P>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<P> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new <P>(props: P, context?: any): {
        _input: any;
        focus(): void;
        setInput: (input: any) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<P>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<P> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    contextTypes: {
        getValuePath: import("prop-types").Requireable<(...args: any[]) => any>;
        formBuilder: import("prop-types").Requireable<any>;
    };
    contextType?: React.Context<any>;
};
export default _default;
