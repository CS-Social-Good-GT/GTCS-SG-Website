import PropTypes from 'prop-types';
import React from 'react';
import { Type } from './typedefs';
interface Props {
    schema: object;
    value: any;
    children: any;
    filterField?: any;
    patchChannel: {
        onPatch?: (patch: any) => void;
    };
    resolveInputComponent: (type: Type) => React.ComponentType;
    resolvePreviewComponent: (type: Type) => React.ComponentType;
}
export default class FormBuilderContext extends React.Component<Props> {
    static createPatchChannel: () => {
        onPatch: any;
        receivePatches: any;
    };
    static childContextTypes: {
        getValuePath: PropTypes.Requireable<(...args: any[]) => any>;
        onPatch: PropTypes.Requireable<(...args: any[]) => any>;
        filterField: PropTypes.Requireable<(...args: any[]) => any>;
        formBuilder: PropTypes.Requireable<PropTypes.InferProps<{
            schema: PropTypes.Requireable<object>;
            resolveInputComponent: PropTypes.Requireable<(...args: any[]) => any>;
            document: PropTypes.Requireable<any>;
        }>>;
    };
    getDocument: () => any;
    resolveInputComponent: (arg: any) => any;
    resolvePreviewComponent: (arg: any) => any;
    getChildContext: () => any;
    render(): any;
}
export {};
