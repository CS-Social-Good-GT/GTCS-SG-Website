"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var path = require('path');

var semver = require('semver');

var resolveFrom = require('resolve-from');

var generateHelpUrl = require('@sanity/generate-help-url'); // NOTE: when doing changes here, also remember to update versions in help docs at
// https://docs.sanity.studio/production/desk/edit/helpArticle/upgrade-packages


var PACKAGES = [{
  name: 'react',
  minVersion: '^16.9',
  deprecatedBelow: null,
  maxVersion: null
  /*todo*/

}, {
  name: 'react-dom',
  minVersion: '^16.9',
  deprecatedBelow: null,
  maxVersion: null
  /*todo*/

}];

module.exports = workDir => {
  var manifest = require(path.join(workDir, 'package.json'));

  var dependencies = Object.assign({}, manifest.dependencies, manifest.devDependencies);
  var installedPackages = PACKAGES.map(pkg => {
    if (!dependencies[pkg.name]) {
      return null;
    }

    var manifestPath = resolveFrom.silent(workDir, path.join(pkg.name, 'package.json'));
    var installedVersion = manifestPath ? // eslint-disable-next-line import/no-dynamic-require
    require(manifestPath).version : dependencies[pkg].replace(/[\D.]/g, '');
    return _objectSpread(_objectSpread({}, pkg), {}, {
      installed: installedVersion,
      isUnsupported: pkg.minVersion && !semver.satisfies(semver.coerce(installedVersion), pkg.minVersion),
      isDeprecated: pkg.deprecatedBelow && semver.ltr(installedVersion, pkg.deprecatedBelow)
    });
  }).filter(Boolean);
  var unsupported = installedPackages.filter(pkg => pkg.isUnsupported);
  var deprecated = installedPackages.filter(pkg => !pkg.isUnsupported && pkg.isDeprecated);

  if (deprecated.length > 0) {
    // eslint-disable-next-line no-console
    console.warn("\n[WARN] The following package versions have been deprecated and should be upgraded:\n\n  ".concat(listPackages(deprecated), "\n\nSupport for these will be removed in a future release!\n\n  ").concat(getUpgradeInstructions(deprecated), "\n"));
  }

  if (unsupported.length > 0) {
    // eslint-disable-next-line no-console
    console.error("\n[ERROR] The following package versions are no longer supported and needs to be upgraded:\n\n  ".concat(listPackages(unsupported), "\n\n  ").concat(getUpgradeInstructions(unsupported), "\n"));
    process.exit(1);
  }
};

function listPackages(pkgs) {
  return pkgs.map(pkg => "".concat(pkg.name, " (installed: ").concat(pkg.installed, ", want: ").concat(pkg.deprecatedBelow || pkg.minVersion, ")")).join('\n  ');
}

function getUpgradeInstructions(pkgs) {
  var inst = pkgs.map(pkg => "\"".concat(pkg.name, "@").concat(pkg.minVersion, "\"")).join(' ');
  return "To upgrade run either:\n\n  yarn add ".concat(inst, "\n\n  or\n\n  npm install ").concat(inst, "\n\nRead more at ").concat(generateHelpUrl('upgrade-packages'));
}