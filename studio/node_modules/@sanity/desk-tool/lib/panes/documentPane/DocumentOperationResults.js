"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentOperationResults = void 0;

var React = _interopRequireWildcard(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/snackbar/default"));

var _reactHooks = require("@sanity/react-hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getOpErrorTitle(op) {
  if (op === 'delete') {
    return "An error occurred while attempting to delete this document.\n      This usually means that there are other documents that refers to it.";
  }

  if (op === 'unpublish') {
    return "An error occurred while attempting to unpublish this document.\n      This usually means that there are other documents that refers to it.";
  }

  return "An error occurred during ".concat(op);
}

function getOpSuccessTitle(op) {
  if (op === 'publish') {
    return "This document is now published.";
  }

  if (op === 'unpublish') {
    return "This document is now unpublished. A draft have been created from the latest published version.";
  }

  if (op === 'discardChanges') {
    return "All changes since last publish has now been discarded. The discarded draft can still be recovered from history";
  }

  if (op === 'delete') {
    return "This document is now deleted. It can still be recovered from history and if you continue editing it will be recreated.";
  }

  return "Successfully performed ".concat(op, " on document");
}

var IGNORE_OPS = ['patch', 'commit'];
var DocumentOperationResults = React.memo(props => {
  var event = (0, _reactHooks.useDocumentOperationEvent)(props.id, props.type);

  if (!event) {
    return null;
  }

  if (event && event.type === 'error') {
    return /*#__PURE__*/React.createElement(_default.default, {
      kind: "error",
      key: Math.random(),
      title: getOpErrorTitle(event.op),
      subtitle: /*#__PURE__*/React.createElement("details", null, /*#__PURE__*/React.createElement("summary", null, "Details"), event.error.message)
    });
  }

  if (event && event.type === 'success' && !IGNORE_OPS.includes(event.op)) {
    return /*#__PURE__*/React.createElement(_default.default, {
      key: Math.random(),
      kind: "success",
      title: getOpSuccessTitle(event.op)
    });
  }

  return null;
});
exports.DocumentOperationResults = DocumentOperationResults;