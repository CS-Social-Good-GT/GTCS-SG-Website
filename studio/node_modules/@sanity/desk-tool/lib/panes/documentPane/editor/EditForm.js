"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _formBuilder = require("part:@sanity/form-builder");

var _document = _interopRequireDefault(require("part:@sanity/base/datastore/document"));

var _Editor = _interopRequireDefault(require("../Editor.css"));

var _operators = require("rxjs/operators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var preventDefault = ev => ev.preventDefault();

class EditForm extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "subscription", void 0);

    _defineProperty(this, "patchChannel", _formBuilder.FormBuilder.createPatchChannel());
  }

  componentDidMount() {
    this.subscription = _document.default.pair.documentEvents(this.props.id, this.props.type.name).pipe((0, _operators.tap)(event => {
      this.patchChannel.receiveEvent(event);
    })).subscribe();
  }

  componentWillUnmount() {
    if (this.subscription) this.subscription.unsubscribe();
  }

  render() {
    var _this$props = this.props,
        filterField = _this$props.filterField,
        focusPath = _this$props.focusPath,
        markers = _this$props.markers,
        value = _this$props.value,
        onBlur = _this$props.onBlur,
        onFocus = _this$props.onFocus,
        onChange = _this$props.onChange,
        readOnly = _this$props.readOnly,
        schema = _this$props.schema,
        type = _this$props.type;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("form", {
      className: _Editor.default.editor,
      onSubmit: preventDefault
    }, /*#__PURE__*/_react.default.createElement(_formBuilder.FormBuilder, {
      schema: schema,
      patchChannel: this.patchChannel,
      value: value || {
        _type: type
      },
      type: type,
      filterField: filterField,
      readOnly: readOnly,
      onBlur: onBlur,
      onFocus: onFocus,
      focusPath: focusPath,
      onChange: onChange,
      markers: markers
    })));
  }

}

exports.default = EditForm;