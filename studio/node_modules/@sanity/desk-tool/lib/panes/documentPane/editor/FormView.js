"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _documentActionUtils = require("part:@sanity/base/util/document-action-utils");

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _afterEditorComponent = _interopRequireDefault(require("all:part:@sanity/desk-tool/after-editor-component"));

var _filterFieldsFn = _interopRequireDefault(require("part:@sanity/desk-tool/filter-fields-fn?"));

var _Editor = _interopRequireDefault(require("../Editor.css"));

var _EditForm = _interopRequireDefault(require("./EditForm"));

var _HistoryForm = _interopRequireDefault(require("./HistoryForm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var noop = () => undefined;

var INITIAL_STATE = {
  focusPath: [],
  filterField: () => true
};

class FormView extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", INITIAL_STATE);

    _defineProperty(this, "handleFocus", path => {
      this.setState({
        focusPath: path
      });
    });

    _defineProperty(this, "handleBlur", () => {// do nothing
    });
  }

  componentDidMount() {
    if (_filterFieldsFn.default) {
      this.filterFieldFnSubscription = _filterFieldsFn.default.subscribe(filterField => this.setState({
        filterField
      }));
    }
  }

  componentWillUnmount() {
    if (this.filterFieldFnSubscription) {
      this.filterFieldFnSubscription.unsubscribe();
    }
  }

  isReadOnly() {
    var _this$props = this.props,
        document = _this$props.document,
        schemaType = _this$props.schemaType,
        isConnected = _this$props.isConnected;
    var draft = document.draft,
        published = document.published;
    var isNonExistent = !draft && !published;
    return !isConnected || !(0, _documentActionUtils.isActionEnabled)(schemaType, 'update') || isNonExistent && !(0, _documentActionUtils.isActionEnabled)(schemaType, 'create');
  }

  render() {
    var _this$props2 = this.props,
        document = _this$props2.document,
        id = _this$props2.id,
        history = _this$props2.history,
        schemaType = _this$props2.schemaType,
        markers = _this$props2.markers,
        patchChannel = _this$props2.patchChannel,
        initialValue = _this$props2.initialValue;
    var draft = document.draft,
        published = document.published,
        displayed = document.displayed;
    var _this$state = this.state,
        focusPath = _this$state.focusPath,
        filterField = _this$state.filterField;
    var value = draft || published;
    var readOnly = this.isReadOnly();

    var documentId = displayed && displayed._id && displayed._id.replace(/^drafts\./, '');

    var hasTypeMismatch = value && value._type && value._type !== schemaType.name;

    if (hasTypeMismatch) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: _Editor.default.typeMisMatchMessage
      }, "This document is of type ", /*#__PURE__*/_react.default.createElement("code", null, value._type), " and cannot be edited as", ' ', /*#__PURE__*/_react.default.createElement("code", null, schemaType.name), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_default.default, {
        onClick: this.handleEditAsActualType
      }, "Edit as ", value._type, " instead")));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: _Editor.default.root
    }, history.isOpen ? /*#__PURE__*/_react.default.createElement(_HistoryForm.default, {
      document: displayed,
      schema: _schema.default,
      schemaType: schemaType
    }) : /*#__PURE__*/_react.default.createElement(_EditForm.default, {
      id: id,
      value: draft || published || initialValue,
      filterField: filterField,
      focusPath: focusPath,
      markers: markers,
      onBlur: this.handleBlur,
      onChange: readOnly ? noop : this.props.onChange,
      onFocus: this.handleFocus,
      patchChannel: patchChannel,
      readOnly: readOnly,
      schema: _schema.default,
      type: schemaType
    }), _afterEditorComponent.default.map((AfterEditorComponent, i) => /*#__PURE__*/_react.default.createElement(AfterEditorComponent, {
      key: i,
      documentId: documentId
    })));
  }

}

exports.default = FormView;

_defineProperty(FormView, "propTypes", {
  id: _propTypes.default.string,
  patchChannel: _propTypes.default.object,
  document: _propTypes.default.shape({
    draft: _propTypes.default.shape({
      _id: _propTypes.default.string,
      _type: _propTypes.default.string
    }),
    published: _propTypes.default.shape({
      _id: _propTypes.default.string,
      _type: _propTypes.default.string
    }),
    displayed: _propTypes.default.shape({
      _id: _propTypes.default.string,
      _type: _propTypes.default.string
    })
  }).isRequired,
  initialValue: _propTypes.default.shape({
    _type: _propTypes.default.string
  }),
  isConnected: _propTypes.default.bool,
  onChange: _propTypes.default.func.isRequired,
  schemaType: _propTypes.default.shape({
    name: _propTypes.default.string,
    title: _propTypes.default.string
  }).isRequired,
  markers: _propTypes.default.arrayOf(_propTypes.default.shape({
    path: _propTypes.default.array
  })),
  history: _propTypes.default.shape({
    isLoadingEvents: _propTypes.default.bool.isRequired,
    isOpen: _propTypes.default.bool.isRequired,
    selectedEvent: _propTypes.default.object,
    document: _propTypes.default.shape({
      isLoading: _propTypes.default.bool.isRequired,
      snapshot: _propTypes.default.shape({
        _type: _propTypes.default.string
      })
    })
  }).isRequired
});

_defineProperty(FormView, "defaultProps", {
  markers: [],
  isConnected: true,
  initialValue: undefined
});