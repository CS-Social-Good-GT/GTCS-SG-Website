import React from 'react';
import { Subscription } from 'rxjs';
interface Doc {
    _id: string;
    _type: string;
    _rev: string;
    _updatedAt: string;
}
interface HistoricalDocumentState {
    isLoading: boolean;
    snapshot: null | Doc;
    prevSnapshot: null | Doc;
}
interface HistoryState {
    isEnabled: boolean;
    isLoading: boolean;
    error: null | Error;
    events: any[];
}
interface State {
    historical: HistoricalDocumentState;
    historyState: HistoryState;
    history: any;
    hasNarrowScreen: boolean;
    inspect: boolean;
    isMenuOpen: boolean;
    showValidationTooltip: boolean;
}
interface Props {
    styles?: {
        error?: string;
        errorInner?: string;
    };
    title?: string;
    paneKey: string;
    type: any;
    published: null | Doc;
    draft: null | Doc;
    value: null | Doc;
    connectionState: 'connecting' | 'connected' | 'reconnecting';
    isSelected: boolean;
    isCollapsed: boolean;
    markers: any[];
    onChange: (patches: any[]) => void;
    isClosable: boolean;
    onExpand?: () => void;
    onCollapse?: () => void;
    menuItems: {
        title: string;
    }[];
    menuItemGroups: {
        id: string;
    }[];
    views: {
        type: string;
        id: string;
        title: string;
        options: {};
        component: React.ComponentType<any>;
    }[];
    initialValue?: {
        [field: string]: any;
    };
    options: {
        id: string;
        type: string;
        template?: string;
    };
    urlParams: {
        view: string;
        rev: string;
    };
}
export default class DocumentPane extends React.PureComponent<Props, State> {
    _historyEventsSubscription?: Subscription;
    _historyFetchDocSubscription?: Subscription;
    resizeSubscriber?: Subscription;
    _isMounted?: boolean;
    subscription?: Subscription;
    static contextType: any;
    static defaultProps: {
        title: string;
        views: never[];
        menuItems: never[];
        menuItemGroups: never[];
    };
    state: {
        hasNarrowScreen: any;
        historical: HistoricalDocumentState;
        historyState: HistoryState;
        history: any;
        inspect: boolean;
        isMenuOpen: boolean;
        showValidationTooltip: boolean;
    };
    formRef: React.RefObject<HTMLFormElement>;
    constructor(props: any, context: any);
    setup(documentId: any, context?: any): void;
    getActiveViewId(): any;
    getDraftId(): any;
    getPublishedId(): any;
    componentDidUpdate(prevProps: any, prevState: any): void;
    handleHistoryTransition(prevProps: any, prevState: any): void;
    handleFetchHistoricalDocument(atRev?: any): void;
    handleHistorySelect: (event: any) => void;
    handleSplitPane: () => void;
    handleSetActiveView: (...args: any[]) => void;
    handleClosePane: () => void;
    getInitialValue(): {
        _type: string;
    };
    canShowHistoryList(): boolean;
    componentDidMount(): void;
    componentWillUnmount(): void;
    isLiveEditEnabled(): boolean;
    historyIsOpen(): boolean;
    dispose(): void;
    handleToggleInspect: () => void;
    handleKeyUp: (event: any) => void | Window | null;
    handleHideInspector: () => void;
    handleMenuAction: (item: any) => boolean;
    handleCloseValidationResults: () => void;
    handleToggleValidationResults: () => void;
    setHistoryState: (nextHistoryState: any, cb?: (...args: any[]) => void) => void;
    handleFetchHistoryEvents(): void;
    handleOpenHistory: () => void;
    handleCloseHistory: (ctx?: any) => void;
    handleMenuToggle: (evt: any) => void;
    handleEditAsActualType: () => void;
    handleSetFocus: (path: any) => void;
    renderError(error: any): JSX.Element;
    renderUnknownSchemaType(): JSX.Element;
    getTitle(value: any): string | JSX.Element;
    renderActions: () => JSX.Element | null;
    findSelectedHistoryEvent(): any;
    findHistoryEventByRev(rev: any): any;
    renderHistoryFooter: (selectedEvent: any) => JSX.Element;
    renderFooter: () => JSX.Element;
    getHistoryEventDateString(): string;
    renderHistorySpinner(): JSX.Element | null;
    renderCurrentView(): JSX.Element | null;
    render(): JSX.Element;
}
export {};
