"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMenuItems = exports.getProductionPreviewItem = void 0;

var _react = _interopRequireDefault(require("react"));

var _publicIcon = _interopRequireDefault(require("part:@sanity/base/public-icon"));

var _binaryIcon = _interopRequireDefault(require("part:@sanity/base/binary-icon"));

var _historyIcon = _interopRequireDefault(require("part:@sanity/base/history-icon"));

var _resolveProductionUrl = _interopRequireDefault(require("part:@sanity/transitional/production-preview/resolve-production-url?"));

var _hotkeys = _interopRequireDefault(require("part:@sanity/components/typography/hotkeys"));

var _history = require("./editor/history");

var _documentPaneMenuItems = _interopRequireDefault(require("./documentPaneMenuItems.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getHistoryMenuItem = (_ref) => {
  var value = _ref.value,
      isLiveEditEnabled = _ref.isLiveEditEnabled,
      isHistoryEnabled = _ref.isHistoryEnabled,
      canShowHistoryList = _ref.canShowHistoryList;

  if (isLiveEditEnabled || !canShowHistoryList) {
    return null;
  }

  if ((0, _history.historyIsEnabled)()) {
    return {
      action: 'browseHistory',
      title: 'Browse history',
      icon: _historyIcon.default,
      isDisabled: isHistoryEnabled || !value
    };
  }

  return null;
};

var getInspectItem = (_ref2) => {
  var value = _ref2.value;
  return {
    action: 'inspect',
    title: /*#__PURE__*/_react.default.createElement("span", {
      className: _documentPaneMenuItems.default.menuItem
    }, "Inspect", ' ', /*#__PURE__*/_react.default.createElement("span", {
      className: _documentPaneMenuItems.default.hotkey
    }, /*#__PURE__*/_react.default.createElement(_hotkeys.default, {
      keys: ['Ctrl', 'Alt', 'I']
    }))),
    icon: _binaryIcon.default,
    isDisabled: !value
  };
};

var getProductionPreviewItem = (_ref3) => {
  var value = _ref3.value,
      revision = _ref3.revision;

  if (!value || !_resolveProductionUrl.default) {
    return null;
  }

  var previewUrl;

  try {
    previewUrl = (0, _resolveProductionUrl.default)(value, revision);
  } catch (error) {
    error.message = "An error was thrown while trying to get production preview url: ".concat(error.message); // eslint-disable-next-line no-console

    console.error(error);
    return null;
  }

  if (!previewUrl) {
    return null;
  }

  return {
    action: 'production-preview',
    title: /*#__PURE__*/_react.default.createElement("span", {
      className: _documentPaneMenuItems.default.menuItem
    }, "Open preview", /*#__PURE__*/_react.default.createElement("span", {
      className: _documentPaneMenuItems.default.hotkey
    }, /*#__PURE__*/_react.default.createElement(_hotkeys.default, {
      keys: ['Ctrl', 'Alt', 'O']
    }))),
    icon: _publicIcon.default,
    url: previewUrl
  };
}; // eslint-disable-next-line import/prefer-default-export


exports.getProductionPreviewItem = getProductionPreviewItem;

var getMenuItems = (_ref4) => {
  var value = _ref4.value,
      isLiveEditEnabled = _ref4.isLiveEditEnabled,
      isHistoryEnabled = _ref4.isHistoryEnabled,
      revision = _ref4.revision,
      canShowHistoryList = _ref4.canShowHistoryList;
  return [getProductionPreviewItem, getHistoryMenuItem, getInspectItem].filter(Boolean).map(fn => fn({
    value,
    isLiveEditEnabled,
    isHistoryEnabled,
    revision,
    canShowHistoryList
  })).filter(Boolean);
};

exports.getMenuItems = getMenuItems;