"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _scroll = _interopRequireDefault(require("scroll"));

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/snackbar/default"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _HistoryItem = _interopRequireDefault(require("./HistoryItem"));

var _History = _interopRequireDefault(require("./History.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class History extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      headerShadowOpacity: 0
    });

    _defineProperty(this, "_listElement", _react.default.createRef());

    _defineProperty(this, "handleListScroll", event => {
      var scrollTop = event.target.scrollTop;
      this.setState({
        headerShadowOpacity: Math.min(scrollTop, 50) / 100
      });
    });

    _defineProperty(this, "handleNewCurrentEvent", () => {
      if (this._listElement && this._listElement.current) {
        _scroll.default.top(this._listElement.current, 0);
      }
    });

    _defineProperty(this, "handleScrollToSelected", () => {
      var _this$props = this.props,
          events = _this$props.events,
          selectedEvent = _this$props.selectedEvent;
      var selectedIndex = events.indexOf(selectedEvent);

      if (selectedIndex > 0 && this._listElement && this._listElement.current) {
        var listElement = this._listElement.current.childNodes[selectedIndex]; // Leave a bit of room at the top if possible, to indicate that we've scrolled

        var scrollTo = Math.max(0, listElement.getBoundingClientRect().top - 250);

        _scroll.default.top(this._listElement.current, scrollTo);
      }
    });

    _defineProperty(this, "handleSelectNext", () => {
      var _this$props2 = this.props,
          events = _this$props2.events,
          selectedEvent = _this$props2.selectedEvent,
          onItemSelect = _this$props2.onItemSelect;
      var i = events.indexOf(selectedEvent);
      var newSelection = i === -1 ? null : events[i + 1];

      if (newSelection) {
        onItemSelect(newSelection);
      }
    });

    _defineProperty(this, "handleSelectPrev", () => {
      var _this$props3 = this.props,
          events = _this$props3.events,
          selectedEvent = _this$props3.selectedEvent,
          onItemSelect = _this$props3.onItemSelect;
      var i = events.indexOf(selectedEvent);
      var newSelection = i === -1 ? null : events[i - 1];

      if (newSelection) {
        onItemSelect(newSelection);
      }
    });
  }

  componentDidMount() {
    if (this._listElement && this._listElement.current) {
      this._listElement.current.addEventListener('scroll', this.handleListScroll, {
        passive: true
      });
    }

    this.handleScrollToSelected();
  }

  componentWillUnmount() {
    if (this._listElement && this._listElement.current) {
      this._listElement.current.removeEventListener('scroll', this.handleListScroll);
    }
  }

  componentDidUpdate(prevProps) {
    var _this$props4 = this.props,
        selectedRev = _this$props4.selectedRev,
        events = _this$props4.events,
        historyValue = _this$props4.historyValue,
        isLoading = _this$props4.isLoading;

    if (prevProps.historyValue && !historyValue && events[0].rev === selectedRev) {
      this.handleNewCurrentEvent();
    }

    if (prevProps.isLoading && !isLoading) {
      this.handleScrollToSelected();
    }
  }

  render() {
    var _this$props5 = this.props,
        onClose = _this$props5.onClose,
        events = _this$props5.events,
        onItemSelect = _this$props5.onItemSelect,
        selectedEvent = _this$props5.selectedEvent,
        isLoading = _this$props5.isLoading,
        error = _this$props5.error;
    var headerShadowOpacity = this.state.headerShadowOpacity;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _History.default.root
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _History.default.header,
      style: {
        boxShadow: "0 0px 2px rgba(0, 0, 0, ".concat(headerShadowOpacity, ")")
      }
    }, "History", /*#__PURE__*/_react.default.createElement(_default.default, {
      onClick: onClose,
      title: "Close",
      icon: _closeIcon.default,
      bleed: true,
      kind: "simple",
      className: _History.default.closeButton
    })), isLoading && /*#__PURE__*/_react.default.createElement(_spinner.default, {
      center: true,
      message: "Loading history"
    }), error && /*#__PURE__*/_react.default.createElement("p", null, "Could not load history"), /*#__PURE__*/_react.default.createElement("div", {
      className: _History.default.list,
      ref: this._listElement
    }, !(isLoading || error) && events.map((event, i) => /*#__PURE__*/_react.default.createElement(_HistoryItem.default, _extends({}, event, {
      key: event.rev,
      isSelected: event === selectedEvent,
      isCurrentVersion: i === 0,
      onClick: () => onItemSelect(event),
      onSelectPrev: this.handleSelectPrev,
      onSelectNext: this.handleSelectNext
    })))), error && /*#__PURE__*/_react.default.createElement(_default2.default, {
      kind: "error",
      isPersisted: true,
      title: error
    }));
  }

}

exports.default = History;

_defineProperty(History, "propTypes", {
  events: _propTypes.default.arrayOf(_propTypes.default.object),
  onClose: _propTypes.default.func,
  documentId: _propTypes.default.string,
  onItemSelect: _propTypes.default.func,
  isLoading: _propTypes.default.bool,
  lastEdited: _propTypes.default.object,
  errorMessage: _propTypes.default.string,
  selectedEvent: _propTypes.default.object,
  selectedRev: _propTypes.default.string,
  historyValue: _propTypes.default.object,
  error: _propTypes.default.object
});

_defineProperty(History, "defaultProps", {
  isLoading: true
});