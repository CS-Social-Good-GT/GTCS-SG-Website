"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionMenu = ActionMenu;

var _DocumentStatusBarActions = _interopRequireDefault(require("./DocumentStatusBarActions.css"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _hotkeys = _interopRequireDefault(require("part:@sanity/components/typography/hotkeys"));

var _react = _interopRequireDefault(require("react"));

var _autoId = require("@reach/auto-id");

var _chevronDownIcon = _interopRequireDefault(require("part:@sanity/base/chevron-down-icon"));

var _useOnclickoutside = _interopRequireDefault(require("use-onclickoutside"));

var _ActionStateDialog = require("./ActionStateDialog");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function getNext(array, fromIndex) {
  var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var next = fromIndex + dir;
  return array[next >= array.length ? 0 : next < 0 ? array.length - 1 : next];
}

function ActionMenu(_ref) {
  var actionStates = _ref.actionStates,
      onOpen = _ref.onOpen,
      onClose = _ref.onClose,
      disabled = _ref.disabled,
      isOpen = _ref.isOpen;

  var clickOutsideRef = _react.default.useRef(null);

  var listRef = _react.default.useRef(null);

  (0, _useOnclickoutside.default)(clickOutsideRef, () => {
    if (!isOpen) {
      return;
    } // this is a bit hacky, but if there is a modal open, we should not close on outside clicks


    var hasOpenDialog = actionStates.some(state => state.dialog);

    if (!hasOpenDialog) {
      onClose();
    }
  });
  var idPrefix = (0, _autoId.useId)();

  var _React$useState = _react.default.useState(actionStates.find(s => !s.disabled)),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      activeAction = _React$useState2[0],
      setActiveAction = _React$useState2[1];

  _react.default.useEffect(() => {
    setActiveAction(actionStates.find(s => !s.disabled));
  }, [isOpen]);

  _react.default.useEffect(() => {
    if (listRef.current) {
      var el = listRef.current.querySelector('[data-has-focus]');

      if (el) {
        el.focus();
      }
    }
  }, [activeAction, actionStates]);

  var handleKeyDown = _react.default.useCallback(event => {
    if (event.key !== 'ArrowUp' && event.key !== 'ArrowDown') {
      return;
    }

    var dir = event.key === 'ArrowUp' ? -1 : 1;
    var enabledActions = actionStates.filter(state => state === activeAction || !state.disabled);
    setActiveAction(getNext(enabledActions, enabledActions.indexOf(activeAction), dir));
  }, [activeAction, actionStates]);

  return /*#__PURE__*/_react.default.createElement("div", {
    className: _DocumentStatusBarActions.default.actionsDropDown,
    ref: clickOutsideRef,
    onKeyDown: handleKeyDown
  }, /*#__PURE__*/_react.default.createElement(_default.default, {
    "aria-controls": "".concat(idPrefix, "-menu"),
    "aria-haspopup": "true",
    "aria-label": "Actions",
    className: _DocumentStatusBarActions.default.actionsDropDownButton,
    disabled: disabled,
    icon: _chevronDownIcon.default,
    id: "".concat(idPrefix, "-button"),
    kind: "secondary",
    onClick: isOpen ? onClose : onOpen
  }), isOpen && /*#__PURE__*/_react.default.createElement("div", {
    className: _DocumentStatusBarActions.default.menuContainer
  }, /*#__PURE__*/_react.default.createElement("ul", {
    "aria-labelledby": "".concat(idPrefix, "-button"),
    className: _DocumentStatusBarActions.default.menu,
    id: "".concat(idPrefix, "-menu"),
    role: "menu",
    ref: listRef
  }, actionStates.map((actionState, idx) => {
    return /*#__PURE__*/_react.default.createElement("li", {
      key: idx,
      className: _DocumentStatusBarActions.default.menuItem,
      role: "presentation"
    }, /*#__PURE__*/_react.default.createElement("button", _extends({}, actionState === activeAction && {
      ['data-has-focus']: true
    }, {
      "aria-label": actionState.label,
      className: _DocumentStatusBarActions.default.menuItemButton,
      disabled: disabled || Boolean(actionState.disabled),
      title: actionState.title,
      onClick: actionState.onHandle,
      role: "menuitem",
      tabIndex: -1,
      type: "button"
    }), /*#__PURE__*/_react.default.createElement("div", {
      tabIndex: -1
    }, actionState.icon && /*#__PURE__*/_react.default.createElement("span", {
      className: _DocumentStatusBarActions.default.menuItemIcon
    }, _react.default.createElement(actionState.icon)), /*#__PURE__*/_react.default.createElement("span", {
      className: _DocumentStatusBarActions.default.menuItemLabel
    }, actionState.label), actionState.shortcut && /*#__PURE__*/_react.default.createElement("span", {
      className: _DocumentStatusBarActions.default.menuItemHotkeys
    }, /*#__PURE__*/_react.default.createElement(_hotkeys.default, {
      keys: [actionState.shortcut]
    })))), actionState.dialog && /*#__PURE__*/_react.default.createElement(_ActionStateDialog.ActionStateDialog, {
      dialog: actionState.dialog
    }));
  }))));
}