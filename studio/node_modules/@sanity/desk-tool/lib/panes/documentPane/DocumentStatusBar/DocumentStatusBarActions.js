"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentStatusBarActions = DocumentStatusBarActions;
exports.HistoryStatusBarActions = HistoryStatusBarActions;

var _reactHooks = require("@sanity/react-hooks");

var _react = _interopRequireDefault(require("react"));

var _reactTippy = require("react-tippy");

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _hotkeys = _interopRequireDefault(require("part:@sanity/components/typography/hotkeys"));

var _DocumentStatusBarActions = _interopRequireDefault(require("./DocumentStatusBarActions.css"));

var _ActionMenu = require("./ActionMenu");

var _utils = require("part:@sanity/base/actions/utils");

var _resolver = _interopRequireDefault(require("part:@sanity/base/document-actions/resolver"));

var _ActionStateDialog = require("./ActionStateDialog");

var _HistoryRestoreAction = require("../../../actions/HistoryRestoreAction");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var TOUCH_SUPPORT = ('ontouchstart' in document.documentElement);

function ConditionalTooltip(props) {
  var show = props.show,
      rest = _objectWithoutProperties(props, ["show"]);

  return props.show ? /*#__PURE__*/_react.default.createElement(_reactTippy.Tooltip, rest) : rest.children;
}

function DocumentStatusBarActionsInner(props) {
  var states = props.states,
      showMenu = props.showMenu;

  var _states = _toArray(states),
      firstActionState = _states[0],
      menuActionStates = _states.slice(1);

  return /*#__PURE__*/_react.default.createElement("div", {
    className: props.isMenuOpen ? _DocumentStatusBarActions.default.isMenuOpen : _DocumentStatusBarActions.default.root
  }, firstActionState && /*#__PURE__*/_react.default.createElement("div", {
    className: _DocumentStatusBarActions.default.mainAction
  }, /*#__PURE__*/_react.default.createElement(ConditionalTooltip, {
    show: firstActionState.title || firstActionState.shortcut,
    arrow: true,
    theme: "light",
    hideOnClick: false,
    disabled: TOUCH_SUPPORT,
    className: _DocumentStatusBarActions.default.tooltip,
    html: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, firstActionState.title && /*#__PURE__*/_react.default.createElement("span", {
      className: _DocumentStatusBarActions.default.tooltipTitle
    }, firstActionState.title), firstActionState.shortcut && /*#__PURE__*/_react.default.createElement("span", {
      className: _DocumentStatusBarActions.default.tooltipHotkeys
    }, /*#__PURE__*/_react.default.createElement(_hotkeys.default, {
      keys: [firstActionState.shortcut]
    })))
  }, /*#__PURE__*/_react.default.createElement(_default.default, {
    className: showMenu ? _DocumentStatusBarActions.default.mainActionButtonWithMoreActions : _DocumentStatusBarActions.default.mainActionButton,
    icon: firstActionState.icon,
    color: firstActionState.disabled ? undefined : firstActionState.color || 'primary',
    disabled: props.disabled || Boolean(firstActionState.disabled),
    "aria-label": firstActionState.title,
    onClick: firstActionState.onHandle
  }, firstActionState.label)), firstActionState.dialog && /*#__PURE__*/_react.default.createElement(_ActionStateDialog.ActionStateDialog, {
    dialog: firstActionState.dialog
  })), showMenu && /*#__PURE__*/_react.default.createElement(_ActionMenu.ActionMenu, {
    actionStates: menuActionStates,
    isOpen: props.isMenuOpen,
    onOpen: props.onMenuOpen,
    onClose: props.onMenuClose,
    disabled: props.disabled
  }));
}

function DocumentStatusBarActions(props) {
  var editState = (0, _reactHooks.useEditState)(props.id, props.type);
  var connectionState = (0, _reactHooks.useConnectionState)(props.id, props.type);

  var _React$useState = _react.default.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      isMenuOpen = _React$useState2[0],
      setMenuOpen = _React$useState2[1];

  var actions = editState ? (0, _resolver.default)(editState) : null;
  return actions ? /*#__PURE__*/_react.default.createElement(_utils.RenderActionCollectionState, {
    component: DocumentStatusBarActionsInner,
    isMenuOpen: isMenuOpen,
    showMenu: actions.length > 1,
    onMenuOpen: () => setMenuOpen(true),
    onMenuClose: () => setMenuOpen(false),
    onActionComplete: () => setMenuOpen(false),
    actions: isMenuOpen ? actions : actions.slice(0, 1),
    actionProps: editState,
    disabled: connectionState !== 'connected'
  }) : null;
}

var historyActions = [_HistoryRestoreAction.HistoryRestoreAction];

function HistoryStatusBarActions(props) {
  var editState = (0, _reactHooks.useEditState)(props.id, props.type);
  var connectionState = (0, _reactHooks.useConnectionState)(props.id, props.type);

  if (!editState) {
    return null;
  }

  var disabled = (editState.draft || editState.published || {})._rev === props.revision;

  var actionProps = _objectSpread(_objectSpread({}, editState), {}, {
    revision: props.revision
  });

  return /*#__PURE__*/_react.default.createElement(_utils.RenderActionCollectionState, {
    component: DocumentStatusBarActionsInner,
    actions: historyActions,
    actionProps: actionProps,
    disabled: connectionState !== 'connected' || Boolean(disabled)
  });
}