"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SyncState = SyncState;

var React = _interopRequireWildcard(require("react"));

var _checkIcon = _interopRequireDefault(require("part:@sanity/base/check-icon"));

var _syncIcon = _interopRequireDefault(require("part:@sanity/base/sync-icon"));

var _SyncState = _interopRequireDefault(require("./SyncState.css"));

var _reactHooks = require("@sanity/react-hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SyncState(props) {
  var _useSyncState = (0, _reactHooks.useSyncState)(props.id, props.type),
      isSyncing = _useSyncState.isSyncing;

  var connectionState = (0, _reactHooks.useConnectionState)(props.id, props.type);
  var isConnected = connectionState === 'connected';
  var icon = isSyncing || !isConnected ? /*#__PURE__*/React.createElement(_syncIcon.default, null) : /*#__PURE__*/React.createElement(_checkIcon.default, null);
  var className = isSyncing ? _SyncState.default.isSyncing : !isConnected ? _SyncState.default.isDisconnected : _SyncState.default.statusIcon;
  return /*#__PURE__*/React.createElement("span", {
    className: className
  }, icon);
}