"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PublishAction = PublishAction;

var React = _interopRequireWildcard(require("react"));

var _reactHooks = require("@sanity/react-hooks");

var _TimeAgo = _interopRequireDefault(require("../components/TimeAgo"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var DISABLED_REASON_TITLE = {
  LIVE_EDIT_ENABLED: 'Cannot publish since liveEdit is enabled for this document type',
  ALREADY_PUBLISHED: 'Already published',
  NO_CHANGES: 'No unpublished changes'
};

var InlineSpinner = () => /*#__PURE__*/React.createElement(_spinner.default, {
  inline: true
});

var Checkmark = () => '✓ ';

function getDisabledReason(reason, publishedAt) {
  if (reason === 'ALREADY_PUBLISHED' && publishedAt) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, "Published ", /*#__PURE__*/React.createElement(_TimeAgo.default, {
      time: publishedAt
    }));
  }

  return DISABLED_REASON_TITLE[reason];
}

function PublishAction(props) {
  var id = props.id,
      type = props.type,
      liveEdit = props.liveEdit,
      draft = props.draft,
      published = props.published;

  if (liveEdit) {
    return {
      label: 'Publish',
      title: 'Live Edit is enabled for this content type and publishing happens automatically as you make changes',
      disabled: true
    };
  }

  var _React$useState = React.useState(null),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      publishState = _React$useState2[0],
      setPublishState = _React$useState2[1];

  var _useDocumentOperation = (0, _reactHooks.useDocumentOperation)(id, type),
      publish = _useDocumentOperation.publish;

  var validationStatus = (0, _reactHooks.useValidationStatus)(id, type);
  var syncState = (0, _reactHooks.useSyncState)(id, type);
  var hasValidationErrors = validationStatus.markers.some(marker => marker.level === 'error'); // we use this to "schedule" publish after pending tasks (e.g. validation and sync) has completed

  var _React$useState3 = React.useState(false),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      publishScheduled = _React$useState4[0],
      setPublishScheduled = _React$useState4[1];

  var doPublish = React.useCallback(() => {
    publish.execute();
    setPublishState('publishing');
  }, [publish]);
  React.useEffect(() => {
    if (publishScheduled && !syncState.isSyncing && !validationStatus.isValidating) {
      if (!hasValidationErrors) {
        doPublish();
      }

      setPublishScheduled(false);
    }
  }, [!syncState.isSyncing && !validationStatus.isValidating]);
  var title = publish.disabled ? getDisabledReason(publish.disabled, (published || {})._updatedAt) || '' : hasValidationErrors ? 'There are validation errors that needs to be fixed before this document can be published' : '';
  React.useEffect(() => {
    var didPublish = publishState === 'publishing' && !draft;
    var nextState = didPublish ? 'published' : null;
    var delay = didPublish ? 200 : 4000;
    var timer = setTimeout(() => {
      setPublishState(nextState);
    }, delay);
    return () => clearTimeout(timer);
  }, [publishState, Boolean(draft)]);
  var disabled = Boolean(publishScheduled || publishState === 'publishing' || publishState === 'published' || hasValidationErrors || publish.disabled);
  var onHandle = React.useCallback(() => {
    if (syncState.isSyncing || validationStatus.isValidating) {
      setPublishScheduled(true);
    } else {
      doPublish();
    }
  }, [syncState.isSyncing, validationStatus.isValidating]);
  return {
    disabled,
    label: publishState === 'published' ? 'Published' : publishScheduled || publishState === 'publishing' ? 'Publishing…' : 'Publish',
    icon: publishState === 'published' ? Checkmark : publishScheduled || publishState === 'publishing' ? InlineSpinner : null,
    title: publishScheduled ? 'Waiting for tasks to finish before publishing' : publishState === 'published' || publishState === 'publishing' ? null : title,
    shortcut: disabled || publishScheduled ? null : 'Ctrl+Alt+P',
    onHandle: onHandle
  };
}