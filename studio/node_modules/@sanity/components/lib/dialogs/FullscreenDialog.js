"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _partition4 = _interopRequireDefault(require("lodash/partition"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _fullscreenStyle = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen-style"));

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _buttonGrid = _interopRequireDefault(require("part:@sanity/components/buttons/button-grid"));

var _Portal = require("../utilities/Portal");

var _StackedEscapable = _interopRequireDefault(require("../utilities/StackedEscapable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var noop = () => {};

class FullScreenDialog extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "createButtonFromAction", (action, i) => {
      return /*#__PURE__*/_react.default.createElement(_default.default, {
        key: i,
        onClick: () => this.props.onAction(action),
        "data-action-index": i,
        color: action.color,
        disabled: action.disabled,
        kind: action.kind,
        autoFocus: action.autoFocus,
        className: action.secondary ? _fullscreenStyle.default.actionSecondary : ''
      }, action.title);
    });

    _defineProperty(this, "renderActions", actions => {
      if (!actions || actions.length === 0) {
        return null;
      }

      var _partition2 = (0, _partition4.default)(actions, action => action.secondary),
          _partition3 = _slicedToArray(_partition2, 2),
          secondary = _partition3[0],
          primary = _partition3[1];

      return /*#__PURE__*/_react.default.createElement(_buttonGrid.default, {
        align: "end",
        secondary: secondary.map(this.createButtonFromAction)
      }, primary.map(this.createButtonFromAction));
    });
  }

  render() {
    var _this$props = this.props,
        color = _this$props.color,
        title = _this$props.title,
        className = _this$props.className,
        onClose = _this$props.onClose,
        onEscape = _this$props.onEscape,
        isOpen = _this$props.isOpen,
        actions = _this$props.actions,
        padding = _this$props.padding,
        centered = _this$props.centered;
    var classNames = [_fullscreenStyle.default[color] || _fullscreenStyle.default.default, isOpen ? _fullscreenStyle.default.isOpen : _fullscreenStyle.default.isClosed, centered && _fullscreenStyle.default.centered, className].filter(Boolean).join(' ');
    return /*#__PURE__*/_react.default.createElement(_StackedEscapable.default, {
      onEscape: onEscape || onClose || noop
    }, /*#__PURE__*/_react.default.createElement(_Portal.Portal, null, /*#__PURE__*/_react.default.createElement("div", {
      className: classNames
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _fullscreenStyle.default.inner
    }, onClose && /*#__PURE__*/_react.default.createElement("button", {
      className: _fullscreenStyle.default.closeButton,
      onClick: onClose,
      type: "button"
    }, /*#__PURE__*/_react.default.createElement(_closeIcon.default, {
      color: "inherit"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: _fullscreenStyle.default["padding_".concat(padding)]
    }, title && /*#__PURE__*/_react.default.createElement("h1", {
      className: _fullscreenStyle.default.title
    }, title), /*#__PURE__*/_react.default.createElement("div", {
      className: _fullscreenStyle.default.content
    }, this.props.children, /*#__PURE__*/_react.default.createElement("div", {
      className: _fullscreenStyle.default.actionsWrapper
    }, this.renderActions(actions))))))));
  }

}

exports.default = FullScreenDialog;

_defineProperty(FullScreenDialog, "propTypes", {
  color: _propTypes.default.oneOf(['default', 'warning', 'info', 'success', 'danger']),
  className: _propTypes.default.string,
  title: _propTypes.default.node,
  children: _propTypes.default.node,
  onClose: _propTypes.default.func,
  onEscape: _propTypes.default.func,
  centered: _propTypes.default.bool,
  isOpen: _propTypes.default.bool,
  onAction: _propTypes.default.func,
  padding: _propTypes.default.oneOf(['none', 'small', 'medium', 'large']),
  actions: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.string.isRequired,
    tooltip: _propTypes.default.string,
    kind: _propTypes.default.string,
    autoFocus: _propTypes.default.bool
  }))
});

_defineProperty(FullScreenDialog, "defaultProps", {
  color: 'default',
  isOpen: true,
  padding: 'large',

  onAction() {},

  actions: []
});