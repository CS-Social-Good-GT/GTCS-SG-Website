"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _item = _interopRequireDefault(require("part:@sanity/components/snackbar/item"));

var _storybook = require("part:@sanity/storybook");

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _provider = _interopRequireDefault(require("part:@sanity/components/snackbar/provider"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function action(something) {
  return () => console.log('action:', something);
}

var Provider = storyFn => /*#__PURE__*/_react.default.createElement(_sanity.default, {
  part: "part:@sanity/components/snackbar/item",
  propTables: [_item.default]
}, /*#__PURE__*/_react.default.createElement(_provider.default, null, storyFn()));

var globalDefaults = {
  offset: 10,
  isOpen: true,
  id: new Date().getTime() + Math.floor(Math.random()),
  setFocus: false,
  onClose: action('onClose()'),
  onDismiss: action('onDismiss()')
};

class SnackQueue extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "addToQueue", () => {
      var snack = this.props.snack;

      var newSnack = _objectSpread(_objectSpread({}, snack), {}, {
        id: new Date().getTime() + Math.floor(Math.random())
      });

      this.context.addToSnackQueue(newSnack);
    });
  }

  render() {
    (0, _knobs.button)('Add to queue', this.addToQueue, 'test');
    return /*#__PURE__*/_react.default.createElement("div", null);
  }

}

_defineProperty(SnackQueue, "propTypes", {
  snack: _propTypes.default.object
});

_defineProperty(SnackQueue, "contextTypes", {
  addToSnackQueue: _propTypes.default.func
});

(0, _storybook.addDecorator)(Provider);
(0, _storybook.addDecorator)(_knobs.withKnobs);
(0, _storybook.storiesOf)('Snackbar', module).add('Default', () => /*#__PURE__*/_react.default.createElement(_item.default, _extends({}, globalDefaults, {
  kind: (0, _knobs.select)('Kind', ['success', 'error', 'warning', 'info'], 'info', 'props'),
  title: (0, _knobs.text)('Title', 'This is a title placeholder', 'props'),
  subtitle: (0, _knobs.text)('Subtitle', '', 'props'),
  icon: (0, _knobs.boolean)('With icons', false),
  isCloseable: (0, _knobs.boolean)('isCloseable', false, 'props'),
  action: {
    title: (0, _knobs.text)('Action title', 'Action'),
    callback: action('callback()')
  },
  children: (0, _knobs.text)('children', '', 'props')
}))).add('Custom icon', () => /*#__PURE__*/_react.default.createElement(_item.default, _extends({}, globalDefaults, {
  kind: (0, _knobs.select)('Kind', ['success', 'error', 'warning', 'info'], 'info', 'props'),
  title: (0, _knobs.text)('Title', 'This is a title placeholder', 'props'),
  subtitle: (0, _knobs.text)('Subtitle', '', 'props'),
  icon: (0, _knobs.text)('Icon', '🐈', 'props'),
  isCloseable: (0, _knobs.boolean)('isCloseable', false, 'props'),
  action: {
    title: (0, _knobs.text)('Action title', 'Action'),
    callback: action('callback()')
  }
}))).add('Custom onClose', () => /*#__PURE__*/_react.default.createElement(_item.default, _extends({}, globalDefaults, {
  kind: (0, _knobs.select)('Kind', ['success', 'error', 'warning', 'info'], 'info', 'props'),
  title: (0, _knobs.text)('Title', 'This is a title placeholder', 'props'),
  subtitle: (0, _knobs.text)('Subtitle', '', 'props'),
  icon: (0, _knobs.text)('Icon', false, 'props'),
  isCloseable: (0, _knobs.boolean)('isCloseable', true, 'props'),
  action: {
    title: (0, _knobs.text)('Action title', 'Action'),
    callback: action('callback()')
  },
  onClose: action((0, _knobs.text)('onClose', 'Custom onClose', 'props'))
}))).add('Stacked', () => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_item.default, _extends({}, globalDefaults, {
  kind: "info",
  title: (0, _knobs.text)('title', 'This is a title placeholder', 'props'),
  isCloseable: (0, _knobs.boolean)('isCloseable', true, 'props'),
  icon: true
})), /*#__PURE__*/_react.default.createElement(_item.default, _extends({}, globalDefaults, {
  offset: 75,
  kind: "warning",
  title: (0, _knobs.text)('title', 'This is a title placeholder', 'props'),
  isCloseable: (0, _knobs.boolean)('isCloseable', true, 'props'),
  icon: true
})), /*#__PURE__*/_react.default.createElement(_item.default, _extends({}, globalDefaults, {
  offset: 140,
  kind: "success",
  title: (0, _knobs.text)('title', 'This is a title placeholder', 'props'),
  isCloseable: (0, _knobs.boolean)('onClose', true, 'props')
})))).add('With children', () => /*#__PURE__*/_react.default.createElement(_item.default, _extends({}, globalDefaults, {
  kind: (0, _knobs.select)('Kind', ['success', 'error', 'warning', 'info'], 'info', 'props'),
  title: (0, _knobs.text)('Title', 'This is a title placeholder', 'props'),
  subtitle: (0, _knobs.text)('Subtitle', '', 'props'),
  icon: (0, _knobs.boolean)('Icon', false, 'props'),
  isCloseable: (0, _knobs.boolean)('isCloseable', true, 'props'),
  action: {
    title: (0, _knobs.text)('Action title', 'Action'),
    callback: action('callback()')
  },
  onClose: action((0, _knobs.text)('onClose', 'Custom onClose', 'props'))
}), /*#__PURE__*/_react.default.createElement("div", null, (0, _knobs.text)('Children', 'This is the children placeholder', 'props')))).add('Transitions', () => {
  var snack = _objectSpread(_objectSpread({}, globalDefaults), {}, {
    kind: (0, _knobs.select)('Kinds', ['info', 'success', 'warning', 'error'], 'info', 'props'),
    title: (0, _knobs.text)('Title', 'This is a title placeholder', 'props'),
    subtitle: (0, _knobs.text)('Subtitle', 'This is a subtitle placeholder', 'props'),
    setAutoFocus: (0, _knobs.boolean)('setAutoFocus', false, 'props'),
    isPersisted: (0, _knobs.boolean)('isPersisted', false, 'props'),
    autoDismissTimeout: (0, _knobs.number)('autoDismissTimeout (ms)', 4000, 'props'),
    icon: (0, _knobs.boolean)('Icon', false, 'props'),
    action: {
      title: (0, _knobs.text)('Action title', ''),
      callback: action('callback()')
    },
    isCloseable: (0, _knobs.boolean)('isCloseable', false, 'props'),
    onClose: action((0, _knobs.text)('onClose', 'Custom onClose', 'props')),
    children: (0, _knobs.text)('children', 'This is a children placeholder', 'props')
  });

  return /*#__PURE__*/_react.default.createElement(SnackQueue, {
    snack: snack
  });
});