"use strict";

var _range2 = _interopRequireDefault(require("lodash/range"));

var _react = _interopRequireDefault(require("react"));

var _router = require("part:@sanity/base/router");

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _anchor = _interopRequireDefault(require("part:@sanity/components/buttons/anchor"));

var _intent = _interopRequireDefault(require("part:@sanity/components/buttons/intent"));

var _dropdown = _interopRequireDefault(require("part:@sanity/components/buttons/dropdown"));

var _button = _interopRequireDefault(require("part:@sanity/components/fileinput/button"));

var _buttonGroup = _interopRequireDefault(require("part:@sanity/components/buttons/button-group"));

var _storybook = require("part:@sanity/storybook");

var _chance = _interopRequireDefault(require("chance"));

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _plusIcon = _interopRequireDefault(require("part:@sanity/base/plus-icon"));

var _sanityLogoIcon = _interopRequireDefault(require("part:@sanity/base/sanity-logo-icon"));

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _buttonGrid = _interopRequireDefault(require("part:@sanity/components/buttons/button-grid"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var chance = new _chance.default();

var handleNavigate = () => {
  /* intentional noop */
};

var router = (0, _router.route)('/', [(0, _router.route)('/bikes/:bikeId'), _router.route.intents('/intents')]);

var preventDefault = evt => evt.preventDefault();

var getButtonKinds = () => (0, _knobs.select)('kind', ['default', 'simple', 'secondary'], 'default', 'props');

var getColorKinds = () => (0, _knobs.select)('color', [undefined, 'primary', 'success', 'danger', 'white'], undefined, 'props');

var items = [{
  index: '1',
  title: 'Test'
}, {
  index: '2',
  title: 'Test 2'
}, {
  index: '3',
  title: 'Test 3'
}, {
  index: '4',
  title: 'Test 4'
}, {
  index: '5',
  title: 'Test 5'
}, {
  index: '6',
  title: 'Test 6'
}, {
  index: '7',
  title: 'Test 7'
}, {
  index: '8',
  title: 'Test 8'
}, {
  index: '9',
  title: 'Test 9'
}, {
  index: '10',
  title: 'Test 10'
}, {
  index: '11',
  title: 'Test 11'
}];

function action(something) {
  return () => console.log('action', something);
}

var centerStyle = {
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  height: '100%',
  width: '100%',
  position: 'absolute',
  top: 0,
  left: 0
};
(0, _storybook.storiesOf)('Buttons', module).addDecorator(_knobs.withKnobs).add('Default', () => {
  var testElement = null;

  function testFocus() {
    testElement.focus();
  }

  function setConfirmButton(element) {
    testElement = element;
  }

  var backgroundColor = (0, _knobs.color)('View color', 'rgba(255, 255, 255, 0', 'test');
  (0, _knobs.button)('Test focus', () => testFocus(), 'test');
  return /*#__PURE__*/_react.default.createElement("div", {
    style: _objectSpread({
      backgroundColor
    }, centerStyle)
  }, /*#__PURE__*/_react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/buttons/default",
    propTables: [_default.default]
  }, /*#__PURE__*/_react.default.createElement(_default.default, {
    kind: getButtonKinds(),
    onClick: action('clicked'),
    disabled: (0, _knobs.boolean)('disabled', false, 'props'),
    inverted: (0, _knobs.boolean)('inverted', false, 'props'),
    onFocus: action('onFocus'),
    onBlur: action('onBlur'),
    color: getColorKinds(),
    loading: (0, _knobs.boolean)('loading', false, 'props'),
    icon: (0, _knobs.boolean)('icon', false, 'props') ? _sanityLogoIcon.default : false,
    ref: setConfirmButton,
    bleed: (0, _knobs.boolean)('bleed', false, 'props')
  }, (0, _knobs.text)('children', 'Touch Me!', 'props'))));
}).add('Anchor <a>', () => {
  var backgroundColor = (0, _knobs.color)('View color', 'rgba(255, 255, 255, 0', 'test');
  return /*#__PURE__*/_react.default.createElement("div", {
    style: _objectSpread({
      backgroundColor
    }, centerStyle)
  }, /*#__PURE__*/_react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/buttons/anchor",
    propTables: [_default.default]
  }, /*#__PURE__*/_react.default.createElement(_anchor.default, {
    kind: getButtonKinds(),
    onClick: action('clicked'),
    disabled: (0, _knobs.boolean)('disabled', false, 'props'),
    inverted: (0, _knobs.boolean)('inverted', false, 'props'),
    onFocus: action('onFocus'),
    onBlur: action('onBlur'),
    color: getColorKinds(),
    loading: (0, _knobs.boolean)('loading', false, 'props'),
    icon: (0, _knobs.boolean)('icon', false, 'props') ? _sanityLogoIcon.default : false,
    href: (0, _knobs.text)('href', 'http://example.org', 'props')
  }, (0, _knobs.text)('children', 'Touch Me!', 'props'))));
}).add('DropDownButton', () => {
  var backgroundColor = (0, _knobs.color)('View color', 'rgba(255, 255, 255, 0', 'test');
  return /*#__PURE__*/_react.default.createElement("div", {
    style: _objectSpread({
      backgroundColor
    }, centerStyle)
  }, /*#__PURE__*/_react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/buttons/dropdown",
    propTables: [_dropdown.default]
  }, /*#__PURE__*/_react.default.createElement(_router.RouterProvider, {
    router: router,
    onNavigate: handleNavigate,
    state: router.decode(location.pathname)
  }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
    items: (0, _knobs.object)('items', items, 'props'),
    onAction: action('Clicked item'),
    color: getColorKinds(),
    kind: getButtonKinds(),
    onClick: action('clicked'),
    disabled: (0, _knobs.boolean)('disabled', false, 'props'),
    inverted: (0, _knobs.boolean)('inverted', false, 'props'),
    showArrow: (0, _knobs.boolean)('showArrow', true, 'props'),
    onFocus: action('onFocus'),
    onBlur: action('onBlur'),
    loading: (0, _knobs.boolean)('loading', false, 'props'),
    icon: (0, _knobs.boolean)('icon', false, 'props') ? _sanityLogoIcon.default : undefined
  }, (0, _knobs.text)('prop: children', 'This is a dropdown')))));
}).add('FileInputButton', () => {
  var backgroundColor = (0, _knobs.color)('View color', 'rgba(255, 255, 255, 0', 'test');
  return /*#__PURE__*/_react.default.createElement("div", {
    style: _objectSpread({
      backgroundColor
    }, centerStyle)
  }, /*#__PURE__*/_react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/fileinput/button",
    propTables: [_button.default]
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    onSelect: action('onSelect')
  }, "Upload file\u2026")));
}).add('Examples', () => {
  var disabled = (0, _knobs.boolean)('Disabled', false);
  var loading = (0, _knobs.boolean)('Loading', false);
  var fontSize = (0, _knobs.number)('FontSize (rem)', 1, {
    range: true,
    min: 0.5,
    max: 3,
    step: 0.25
  });
  var backgroundColor = (0, _knobs.color)('View color', 'rgba(255, 255, 255, 0', 'test');
  return /*#__PURE__*/_react.default.createElement(_router.RouterProvider, {
    router: router,
    onNavigate: handleNavigate,
    state: router.decode(location.pathname)
  }, /*#__PURE__*/_react.default.createElement("form", {
    style: {
      padding: '2rem',
      fontSize: "".concat(fontSize, "rem"),
      backgroundColor
    }
  }, /*#__PURE__*/_react.default.createElement("h2", null, "Default"), "Some text", /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    disabled: disabled,
    loading: loading
  }, "Default"), "between", /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    icon: _sanityLogoIcon.default,
    disabled: disabled,
    loading: loading
  }, "Default with icon"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    icon: _sanityLogoIcon.default,
    inverted: true,
    disabled: disabled,
    loading: loading
  }, "Inverted"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    icon: _sanityLogoIcon.default,
    kind: "simple",
    disabled: disabled,
    loading: loading
  }, "Simple"), /*#__PURE__*/_react.default.createElement("h2", null, "Colors"), /*#__PURE__*/_react.default.createElement(_buttonGrid.default, null, /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    disabled: disabled,
    loading: loading
  }, "Undefined"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    color: "primary",
    disabled: disabled,
    loading: loading
  }, "Primary"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    color: "danger",
    disabled: disabled,
    loading: loading
  }, "Danger"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    color: "success",
    disabled: disabled,
    loading: loading
  }, "Success")), /*#__PURE__*/_react.default.createElement("h2", null, "Colors (inverted)"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    inverted: true,
    disabled: disabled,
    loading: loading
  }, "Undefined"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    color: "primary",
    inverted: true,
    disabled: disabled,
    loading: loading
  }, "Primary"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    color: "danger",
    inverted: true,
    disabled: disabled,
    loading: loading
  }, "Danger"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    color: "success",
    inverted: true,
    disabled: disabled,
    loading: loading
  }, "Success"), /*#__PURE__*/_react.default.createElement(_dropdown.default, {
    items: items,
    onAction: action('Clicked item'),
    disabled: disabled,
    loading: loading,
    color: "primary",
    inverted: true
  }, "Dropdown"), /*#__PURE__*/_react.default.createElement("h2", null, "Colors (simple)"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    kind: "simple",
    disabled: disabled,
    loading: loading
  }, "Undefined"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    kind: "simple",
    color: "primary",
    disabled: disabled,
    loading: loading
  }, "Primary"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    kind: "simple",
    color: "danger",
    disabled: disabled,
    loading: loading
  }, "Danger"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    kind: "simple",
    color: "success",
    disabled: disabled,
    loading: loading
  }, "Success"), /*#__PURE__*/_react.default.createElement("h2", null, "With icons"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    icon: _sanityLogoIcon.default,
    disabled: disabled,
    loading: loading
  }, "With icon"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    color: "danger",
    icon: _sanityLogoIcon.default,
    disabled: disabled,
    loading: loading
  }, "Colored with icon"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    color: "danger",
    icon: _sanityLogoIcon.default,
    inverted: true,
    disabled: disabled,
    loading: loading
  }, "Danger, inverted & icon"), /*#__PURE__*/_react.default.createElement(_dropdown.default, {
    icon: _sanityLogoIcon.default,
    inverted: true,
    color: "danger",
    items: items,
    onAction: action('Clicked item'),
    disabled: disabled,
    loading: loading
  }, "Dropdown"), /*#__PURE__*/_react.default.createElement("h2", null, "Only icons"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    icon: _sanityLogoIcon.default,
    title: "Default",
    disabled: disabled,
    loading: loading
  }), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    icon: _sanityLogoIcon.default,
    color: "danger",
    title: "Danger",
    disabled: disabled,
    loading: loading
  }), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    icon: _sanityLogoIcon.default,
    inverted: true,
    title: "Inverted",
    disabled: disabled,
    loading: loading
  }), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    icon: _sanityLogoIcon.default,
    inverted: true,
    color: "danger",
    title: "Inverted danger",
    disabled: disabled,
    loading: loading
  }), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    icon: _sanityLogoIcon.default,
    kind: "simple",
    title: "Simple",
    disabled: disabled,
    loading: loading
  }), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    icon: _sanityLogoIcon.default,
    kind: "simple",
    color: "danger",
    title: "Simple danger",
    disabled: disabled,
    loading: loading
  }), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    icon: _sanityLogoIcon.default,
    kind: "simple",
    color: "primary",
    title: "Simple primary",
    disabled: disabled,
    loading: loading
  }), /*#__PURE__*/_react.default.createElement("h2", null, "Intent buttons with only icons"), /*#__PURE__*/_react.default.createElement(_intent.default, {
    intent: "create",
    params: {
      type: 'book'
    },
    onClick: preventDefault,
    icon: _plusIcon.default,
    title: "Default",
    disabled: disabled,
    loading: loading
  }), /*#__PURE__*/_react.default.createElement(_intent.default, {
    intent: "create",
    params: {
      type: 'book'
    },
    onClick: preventDefault,
    icon: _plusIcon.default,
    color: "danger",
    title: "Danger",
    disabled: disabled
  }), /*#__PURE__*/_react.default.createElement(_intent.default, {
    intent: "create",
    params: {
      type: 'book'
    },
    onClick: preventDefault,
    icon: _plusIcon.default,
    inverted: true,
    title: "Inverted",
    disabled: disabled,
    loading: loading
  }), /*#__PURE__*/_react.default.createElement(_intent.default, {
    intent: "create",
    params: {
      type: 'book'
    },
    onClick: preventDefault,
    icon: _plusIcon.default,
    inverted: true,
    color: "danger",
    title: "Inverted danger",
    disabled: disabled,
    loading: loading
  }), /*#__PURE__*/_react.default.createElement(_intent.default, {
    intent: "create",
    params: {
      type: 'book'
    },
    onClick: preventDefault,
    icon: _plusIcon.default,
    kind: "simple",
    title: "Simple",
    disabled: disabled,
    loading: loading
  }), /*#__PURE__*/_react.default.createElement(_intent.default, {
    intent: "create",
    params: {
      type: 'book'
    },
    onClick: preventDefault,
    icon: _plusIcon.default,
    kind: "simple",
    color: "danger",
    title: "Simple danger",
    disabled: disabled,
    loading: loading
  }), /*#__PURE__*/_react.default.createElement(_intent.default, {
    intent: "create",
    params: {
      type: 'book'
    },
    onClick: preventDefault,
    icon: _plusIcon.default,
    kind: "simple",
    color: "primary",
    title: "Simple primary",
    disabled: disabled,
    loading: loading
  }), /*#__PURE__*/_react.default.createElement("h2", null, "On color areas"), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      backgroundColor: 'red',
      padding: '1rem'
    }
  }, /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    color: "white",
    disabled: disabled,
    loading: loading
  }, "White"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    kind: "simple",
    color: "white",
    disabled: disabled,
    loading: loading
  }, "White simple"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    inverted: true,
    disabled: disabled,
    loading: loading
  }, "Inverted"), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: action('clicked'),
    inverted: true,
    color: "white",
    disabled: disabled,
    loading: loading
  }, "White inverted"))));
}).add('Grid', () => {
  var backgroundColor = (0, _knobs.color)('View color', 'rgba(255, 255, 255, 0', 'test');
  var qtyButtons = (0, _knobs.number)('# buttons', 2, 'test');
  var buttonText = (0, _knobs.text)('Button text', '');
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      backgroundColor,
      margin: '2rem'
    }
  }, /*#__PURE__*/_react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/buttons/button-grid",
    propTables: [_buttonGrid.default]
  }, /*#__PURE__*/_react.default.createElement(_buttonGrid.default, {
    align: (0, _knobs.select)('align', ['start', 'end'], 'start', 'props'),
    secondary: (0, _range2.default)(0, (0, _knobs.number)('# secondary', 1)).map(i => {
      return /*#__PURE__*/_react.default.createElement(_default.default, {
        inverted: true,
        key: i
      }, buttonText || (i % 2 ? chance.word() : chance.name()));
    })
  }, (0, _range2.default)(0, qtyButtons).map(i => {
    return /*#__PURE__*/_react.default.createElement(_default.default, {
      key: i
    }, buttonText || (i % 2 ? chance.word() : chance.name()));
  }))));
}).add('Group', () => {
  var backgroundColor = (0, _knobs.color)('View color', 'rgba(255, 255, 255, 0', 'test');
  var qtyButtons = (0, _knobs.number)('# buttons', 2, 'test');
  var loading = (0, _knobs.boolean)('Loading', false, 'buttonProp');
  var onlyIcon = (0, _knobs.boolean)('Only icon', false, 'test');
  var icon = (0, _knobs.boolean)('icon', false, 'buttonProp') ? _sanityLogoIcon.default : undefined;
  var buttonText = (0, _knobs.text)('Button text', '', 'buttonProp');
  var buttonColor = getColorKinds();
  var buttonKind = getButtonKinds();
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      backgroundColor,
      margin: '2rem'
    }
  }, /*#__PURE__*/_react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/buttons/button-group",
    propTables: [_buttonGroup.default]
  }, /*#__PURE__*/_react.default.createElement(_buttonGroup.default, null, (0, _range2.default)(0, qtyButtons).map(i => {
    return /*#__PURE__*/_react.default.createElement(_default.default, {
      kind: buttonKind,
      color: buttonColor,
      key: i,
      loading: loading,
      icon: icon || onlyIcon && _sanityLogoIcon.default
    }, buttonText || !onlyIcon && (i % 2 ? chance.word() : chance.name()));
  }), /*#__PURE__*/_react.default.createElement(_dropdown.default, {
    items: items,
    kind: buttonKind,
    color: buttonColor,
    loading: loading,
    onAction: action('Clicked item'),
    onFocus: action('onFocus'),
    onBlur: action('onBlur'),
    icon: icon || onlyIcon && _sanityLogoIcon.default
  }, !onlyIcon && 'Dropdown'))));
});