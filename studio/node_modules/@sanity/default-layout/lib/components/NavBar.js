"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactTippy = require("react-tippy");

var _configSanity = _interopRequireDefault(require("config:sanity"));

var _plusIcon = _interopRequireDefault(require("part:@sanity/base/plus-icon"));

var _hamburgerIcon = _interopRequireDefault(require("part:@sanity/base/hamburger-icon"));

var _toolSwitcher = _interopRequireDefault(require("part:@sanity/default-layout/tool-switcher"));

var _searchIcon = _interopRequireDefault(require("part:@sanity/base/search-icon"));

var _router = require("part:@sanity/base/router");

var sidecar = _interopRequireWildcard(require("part:@sanity/default-layout/sidecar?"));

var _spaces = require("../util/spaces");

var _Branding = _interopRequireDefault(require("./Branding"));

var _LoginStatus = _interopRequireDefault(require("./LoginStatus"));

var _SanityStatusContainer = _interopRequireDefault(require("./SanityStatusContainer"));

var _SearchContainer = _interopRequireDefault(require("./SearchContainer"));

var _SpaceSwitcher = _interopRequireDefault(require("./SpaceSwitcher"));

var _NavBar = _interopRequireDefault(require("./styles/NavBar.css"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isSidecarEnabled;
var SidecarToggleButton;

if (sidecar) {
  isSidecarEnabled = sidecar.isSidecarEnabled;
  SidecarToggleButton = sidecar.SidecarToggleButton;
}

function NavBar(props) {
  var searchIsOpen = props.searchIsOpen,
      onCreateButtonClick = props.onCreateButtonClick,
      onToggleMenu = props.onToggleMenu,
      onSwitchTool = props.onSwitchTool,
      onUserLogout = props.onUserLogout,
      onSearchOpen = props.onSearchOpen,
      onSearchClose = props.onSearchClose,
      onSetLoginStatusElement = props.onSetLoginStatusElement,
      onSetSearchElement = props.onSetSearchElement,
      router = props.router,
      tools = props.tools,
      user = props.user,
      showLabel = props.showLabel,
      showToolSwitcher = props.showToolSwitcher;
  var searchClassName = _NavBar.default.search;
  if (searchIsOpen) searchClassName += " ".concat(_NavBar.default.searchIsOpen);
  var className = _NavBar.default.root;
  if (showToolSwitcher) className += " ".concat(_NavBar.default.withToolSwitcher);
  var rootState = _spaces.HAS_SPACES && router.state.space ? {
    space: router.state.space
  } : {};
  return /*#__PURE__*/_react.default.createElement("div", {
    className: className,
    "data-search-open": searchIsOpen
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _NavBar.default.hamburger
  }, /*#__PURE__*/_react.default.createElement("button", {
    className: _NavBar.default.hamburgerButton,
    type: "button",
    title: "Open menu",
    onClick: onToggleMenu
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _NavBar.default.hamburgerButtonInner,
    tabIndex: -1
  }, /*#__PURE__*/_react.default.createElement(_hamburgerIcon.default, null)))), /*#__PURE__*/_react.default.createElement(_router.StateLink, {
    state: rootState,
    className: _NavBar.default.branding
  }, /*#__PURE__*/_react.default.createElement(_Branding.default, {
    projectName: _configSanity.default && _configSanity.default.project.name
  })), /*#__PURE__*/_react.default.createElement("button", {
    className: _NavBar.default.createButton,
    onClick: onCreateButtonClick,
    type: "button"
  }, /*#__PURE__*/_react.default.createElement(_reactTippy.Tooltip, {
    disabled: 'ontouchstart' in document.documentElement,
    title: "Create new document",
    arrow: true,
    inertia: true,
    theme: "dark",
    distance: "7",
    sticky: true,
    size: "small"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _NavBar.default.createButtonInner,
    tabIndex: -1
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _NavBar.default.createButtonIcon
  }, /*#__PURE__*/_react.default.createElement(_plusIcon.default, null)), /*#__PURE__*/_react.default.createElement("span", {
    className: _NavBar.default.createButtonText
  }, "New")))), /*#__PURE__*/_react.default.createElement("div", {
    className: searchClassName,
    ref: onSetSearchElement
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_SearchContainer.default, {
    shouldBeFocused: searchIsOpen,
    onOpen: onSearchOpen,
    onClose: onSearchClose
  }))), _spaces.HAS_SPACES && /*#__PURE__*/_react.default.createElement("div", {
    className: _NavBar.default.spaceSwitcher
  }, /*#__PURE__*/_react.default.createElement(_SpaceSwitcher.default, {
    isVisible: showToolSwitcher
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: _NavBar.default.toolSwitcher
  }, /*#__PURE__*/_react.default.createElement(_toolSwitcher.default, {
    direction: "horizontal",
    isVisible: showToolSwitcher,
    tools: tools,
    activeToolName: router.state.tool,
    onSwitchTool: onSwitchTool,
    showLabel: showLabel
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: _NavBar.default.extras
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: _NavBar.default.sanityStatus
  }, /*#__PURE__*/_react.default.createElement(_SanityStatusContainer.default, null)), /*#__PURE__*/_react.default.createElement("div", {
    className: _NavBar.default.loginStatus,
    ref: onSetLoginStatusElement
  }, /*#__PURE__*/_react.default.createElement(_LoginStatus.default, {
    onLogout: onUserLogout,
    user: user
  })), isSidecarEnabled && isSidecarEnabled() && /*#__PURE__*/_react.default.createElement("div", {
    className: _NavBar.default.sidecarStatus
  }, /*#__PURE__*/_react.default.createElement(SidecarToggleButton, null)), /*#__PURE__*/_react.default.createElement("button", {
    className: _NavBar.default.searchButton,
    onClick: onSearchOpen,
    type: "button"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _NavBar.default.searchButtonInner,
    tabIndex: -1
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: _NavBar.default.searchButtonIcon
  }, /*#__PURE__*/_react.default.createElement(_searchIcon.default, null)), /*#__PURE__*/_react.default.createElement("span", {
    className: _NavBar.default.searchButtonText
  }, "Search"))));
}

NavBar.defaultProps = {
  showLabel: true,
  showToolSwitcher: true,
  onSetLoginStatusElement: undefined,
  onSetSearchElement: undefined
};
NavBar.propTypes = {
  searchIsOpen: _propTypes.default.bool.isRequired,
  onCreateButtonClick: _propTypes.default.func.isRequired,
  onToggleMenu: _propTypes.default.func.isRequired,
  onSwitchTool: _propTypes.default.func.isRequired,
  onUserLogout: _propTypes.default.func.isRequired,
  onSearchOpen: _propTypes.default.func.isRequired,
  onSearchClose: _propTypes.default.func.isRequired,
  onSetLoginStatusElement: _propTypes.default.func,
  onSetSearchElement: _propTypes.default.func,
  router: _propTypes.default.shape({
    state: _propTypes.default.shape({
      tool: _propTypes.default.string,
      space: _propTypes.default.string
    }),
    navigate: _propTypes.default.func
  }).isRequired,
  tools: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string
  })).isRequired,
  user: _propTypes.default.shape({
    name: _propTypes.default.string,
    profileImage: _propTypes.default.string
  }).isRequired,
  showLabel: _propTypes.default.bool,
  showToolSwitcher: _propTypes.default.bool
};
var _default = NavBar;
exports.default = _default;