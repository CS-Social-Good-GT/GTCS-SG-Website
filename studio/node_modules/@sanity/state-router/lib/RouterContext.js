"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRouterState = exports.useRouter = exports.RouterContext = void 0;

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var missingContext = () => {
  throw new Error('No router context provider found');
};

var missingRouter = {
  channel: {
    subscribe: missingContext,
    publish: missingContext
  },
  getState: missingContext,
  navigate: missingContext,
  navigateIntent: missingContext,
  navigateUrl: missingContext,
  resolveIntentLink: missingContext,
  resolvePathFromState: missingContext
};

var RouterContext = _react.default.createContext(missingRouter);

exports.RouterContext = RouterContext;

var useRouter = () => (0, _react.useContext)(RouterContext);

exports.useRouter = useRouter;

var useRouterState = deps => {
  var router = (0, _react.useContext)(RouterContext);

  var _useState = (0, _react.useState)(router.getState()),
      _useState2 = _slicedToArray(_useState, 2),
      routerState = _useState2[0],
      setState = _useState2[1];

  var dependencies;

  if (deps) {
    dependencies = deps.map(key => routerState[key]);
  } // subscribe() returns an unsubscribe function, so this'll handle unmounting


  (0, _react.useEffect)(() => router.channel.subscribe(() => setState(router.getState())), dependencies);
  return routerState;
};

exports.useRouterState = useRouterState;