export declare type Segment = {
    name: string;
    type: 'dir' | 'param';
};
export declare type Transform<T> = {
    toState: (value: string) => T;
    toPath: (value: T) => string;
};
export declare type Route = {
    raw: string;
    segments: Segment[];
    transform?: {
        [key: string]: Transform<any>;
    };
};
export declare type RouteChildren = Node[] | ((state: Object) => Node[]);
export declare type Node = {
    route: Route;
    scope?: string;
    transform?: {
        [key: string]: Transform<any>;
    };
    children: RouteChildren;
};
export declare type Router = Node & {
    _isRoute: boolean;
    encode: (state: Object) => string;
    decode: (path: string) => Object | null;
    isNotFound: (path: string) => boolean;
    getBasePath: () => string;
    getRedirectBase: (pathname: string) => string | null;
    isRoot: (path: string) => boolean;
};
export declare type MatchResult = {
    nodes: Node[];
    missing: string[];
    remaining: string[];
};
