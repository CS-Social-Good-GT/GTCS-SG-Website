export declare type NavigateOptions = {
    replace?: boolean;
};
declare type Channel<T> = {
    subscribe: (arg0: T) => () => void;
    publish(arg0: T): void;
};
export declare type IntentParameters = Record<string, any> | [Record<string, any>, Record<string, any>];
export declare type RouterState = Record<string, any>;
export declare type InternalRouter = {
    resolvePathFromState: (nextState: RouterState) => string;
    resolveIntentLink: (intentName: string, params?: IntentParameters) => string;
    navigateUrl: (url: string, options?: NavigateOptions) => void;
    navigate: (nextState: RouterState, options?: NavigateOptions) => void;
    navigateIntent: (intentName: string, params?: IntentParameters, options?: NavigateOptions) => void;
    getState: () => RouterState;
    channel: Channel<RouterState>;
};
export declare type Router = {
    navigate: (nextState: Record<string, any>, options?: NavigateOptions) => void;
    navigateIntent: (intentName: string, params?: IntentParameters, options?: NavigateOptions) => void;
    state: Record<any, any>;
};
export declare type RouterProviderContext = {
    __internalRouter: InternalRouter;
};
export {};
