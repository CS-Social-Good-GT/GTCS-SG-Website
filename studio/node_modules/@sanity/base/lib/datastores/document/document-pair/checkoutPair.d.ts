import { BufferedDocumentEvent } from '../buffered-doc/createBufferedDocument';
import { IdPair, Mutation } from '../types';
import { Observable } from 'rxjs';
export declare type DocumentVersionEvent = BufferedDocumentEvent & {
    version: 'published' | 'draft';
};
export interface DocumentVersion {
    consistency$: Observable<boolean>;
    events: Observable<DocumentVersionEvent>;
    patch: (patches: any) => Mutation[];
    create: (document: any) => Mutation;
    createIfNotExists: (document: any) => Mutation;
    createOrReplace: (document: any) => Mutation;
    delete: () => Mutation;
    mutate: (mutations: Mutation[]) => void;
    commit: () => Observable<never>;
}
export interface Pair {
    published: DocumentVersion;
    draft: DocumentVersion;
}
export declare function checkoutPair(idPair: IdPair): Pair;
